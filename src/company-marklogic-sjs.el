;;; company-marklogic-sjs.el --- JavaScript tables for Company MarkLogic backend.

;;; Package info:
;;
;; Homepage: https://github.com/fgeorges/company-marklogic
;; Version: 1.0
;;
;;; Commentary:
;;
;; Tables for the Company backend for MarkLogic JavaScript functions.
;;
;; See company-marklogic.el for copyright info.

(defconst company-marklogic-sjs-functions-admin
  '("appserverAddModuleLocation"
    "appserverAddNamespace"
    "appserverAddRequestBlackout"
    "appserverAddSchema"
    "appserverAddUsingNamespace"
    "appserverCopy"
    "appserverDelete"
    "appserverDeleteModuleLocation"
    "appserverDeleteNamespace"
    "appserverDeleteRequestBlackout"
    "appserverDeleteSchema"
    "appserverDeleteUsingNamespace"
    "appserverExists"
    "appserverGetAddress"
    "appserverGetAuthentication"
    "appserverGetBacklog"
    "appserverGetCollation"
    "appserverGetComputeContentLength"
    "appserverGetConcurrentRequestLimit"
    "appserverGetConnectionTimeout"
    "appserverGetCoordinateSystem"
    "appserverGetDatabase"
    "appserverGetDebugAllow"
    "appserverGetDefaultErrorFormat"
    "appserverGetDefaultInferenceSize"
    "appserverGetDefaultQueryTimeLimit"
    "appserverGetDefaultTimeLimit"
    "appserverGetDefaultUser"
    "appserverGetDefaultXqueryVersion"
    "appserverGetDisplayLastLogin"
    "appserverGetDistributeTimestamps"
    "appserverGetEnabled"
    "appserverGetErrorHandler"
    "appserverGetExternalSecurity"
    "appserverGetFileLogLevel"
    "appserverGetGroupId"
    "appserverGetHostIds"
    "appserverGetId"
    "appserverGetInternalSecurity"
    "appserverGetKeepAliveTimeout"
    "appserverGetLastLogin"
    "appserverGetLogErrors"
    "appserverGetMaxInferenceSize"
    "appserverGetMaxQueryTimeLimit"
    "appserverGetMaxTimeLimit"
    "appserverGetModuleLocations"
    "appserverGetModulesDatabase"
    "appserverGetMultiVersionConcurrencyControl"
    "appserverGetName"
    "appserverGetNamespaces"
    "appserverGetOutputByteOrderMark"
    "appserverGetOutputCdataSectionLocalname"
    "appserverGetOutputCdataSectionNamespaceUri"
    "appserverGetOutputDoctypePublic"
    "appserverGetOutputDoctypeSystem"
    "appserverGetOutputEncoding"
    "appserverGetOutputEscapeUriAttributes"
    "appserverGetOutputIncludeContentType"
    "appserverGetOutputIncludeDefaultAttributes"
    "appserverGetOutputIndent"
    "appserverGetOutputIndentTabs"
    "appserverGetOutputIndentUntyped"
    "appserverGetOutputMediaType"
    "appserverGetOutputMethod"
    "appserverGetOutputNormalizationForm"
    "appserverGetOutputOmitXmlDeclaration"
    "appserverGetOutputSgmlCharacterEntities"
    "appserverGetOutputStandalone"
    "appserverGetOutputUndeclarePrefixes"
    "appserverGetOutputVersion"
    "appserverGetPort"
    "appserverGetPreCommitTriggerDepth"
    "appserverGetPreCommitTriggerLimit"
    "appserverGetPrivilege"
    "appserverGetProfileAllow"
    "appserverGetRequestBlackouts"
    "appserverGetRequestTimeout"
    "appserverGetRewriteResolvesGlobally"
    "appserverGetRoot"
    "appserverGetSchemas"
    "appserverGetSessionTimeout"
    "appserverGetSslAllowSslv3"
    "appserverGetSslAllowTls"
    "appserverGetSslCertificateTemplate"
    "appserverGetSslCiphers"
    "appserverGetSslClientCertificateAuthorities"
    "appserverGetSslClientIssuerAuthorityVerification"
    "appserverGetSslDisabledProtocols"
    "appserverGetSslHostname"
    "appserverGetSslRequireClientCertificate"
    "appserverGetStaticExpires"
    "appserverGetThreads"
    "appserverGetType"
    "appserverGetUrlRewriter"
    "appserverGetUsingNamespaces"
    "appserverOneTimeRequestBlackout"
    "appserverRecurringRequestBlackout"
    "appserverSetAddress"
    "appserverSetAuthentication"
    "appserverSetBacklog"
    "appserverSetCollation"
    "appserverSetComputeContentLength"
    "appserverSetConcurrentRequestLimit"
    "appserverSetConnectionTimeout"
    "appserverSetCoordinateSystem"
    "appserverSetDatabase"
    "appserverSetDebugAllow"
    "appserverSetDefaultErrorFormat"
    "appserverSetDefaultInferenceSize"
    "appserverSetDefaultQueryTimeLimit"
    "appserverSetDefaultTimeLimit"
    "appserverSetDefaultUser"
    "appserverSetDefaultXqueryVersion"
    "appserverSetDisplayLastLogin"
    "appserverSetDistributeTimestamps"
    "appserverSetEnabled"
    "appserverSetErrorHandler"
    "appserverSetExternalSecurity"
    "appserverSetFileLogLevel"
    "appserverSetInternalSecurity"
    "appserverSetKeepAliveTimeout"
    "appserverSetLastLogin"
    "appserverSetLogErrors"
    "appserverSetMaxInferenceSize"
    "appserverSetMaxQueryTimeLimit"
    "appserverSetMaxTimeLimit"
    "appserverSetModulesDatabase"
    "appserverSetMultiVersionConcurrencyControl"
    "appserverSetName"
    "appserverSetOutputByteOrderMark"
    "appserverSetOutputCdataSectionLocalname"
    "appserverSetOutputCdataSectionNamespaceUri"
    "appserverSetOutputDoctypePublic"
    "appserverSetOutputDoctypeSystem"
    "appserverSetOutputEncoding"
    "appserverSetOutputEscapeUriAttributes"
    "appserverSetOutputIncludeContentType"
    "appserverSetOutputIncludeDefaultAttributes"
    "appserverSetOutputIndent"
    "appserverSetOutputIndentTabs"
    "appserverSetOutputIndentUntyped"
    "appserverSetOutputMediaType"
    "appserverSetOutputMethod"
    "appserverSetOutputNormalizationForm"
    "appserverSetOutputOmitXmlDeclaration"
    "appserverSetOutputSgmlCharacterEntities"
    "appserverSetOutputStandalone"
    "appserverSetOutputUndeclarePrefixes"
    "appserverSetOutputVersion"
    "appserverSetPort"
    "appserverSetPreCommitTriggerDepth"
    "appserverSetPreCommitTriggerLimit"
    "appserverSetPrivilege"
    "appserverSetProfileAllow"
    "appserverSetRequestTimeout"
    "appserverSetRewriteResolvesGlobally"
    "appserverSetRoot"
    "appserverSetSessionTimeout"
    "appserverSetSslAllowSslv3"
    "appserverSetSslAllowTls"
    "appserverSetSslCertificateTemplate"
    "appserverSetSslCiphers"
    "appserverSetSslClientCertificateAuthorities"
    "appserverSetSslClientIssuerAuthorityVerification"
    "appserverSetSslDisabledProtocols"
    "appserverSetSslHostname"
    "appserverSetSslRequireClientCertificate"
    "appserverSetStaticExpires"
    "appserverSetThreads"
    "appserverSetUrlRewriter"
    "bucketAssignmentPolicy"
    "canCommitUpgrade"
    "checkRangePolicyConfig"
    "clusterGetConfigEncryption"
    "clusterGetConfigEncryptionKeyId"
    "clusterGetDataEncryption"
    "clusterGetDataEncryptionKeyId"
    "clusterGetEffectiveVersion"
    "clusterGetExternalConfigEncryptionKeyId"
    "clusterGetExternalDataEncryptionKeyId"
    "clusterGetExternalLogsEncryptionKeyId"
    "clusterGetForeignClusterId"
    "clusterGetForeignClusterIds"
    "clusterGetForeignMasterDatabase"
    "clusterGetForeignReplicaDatabases"
    "clusterGetId"
    "clusterGetInternalConfigEncryptionKeyId"
    "clusterGetInternalDataEncryptionKeyId"
    "clusterGetInternalLogsEncryptionKeyId"
    "clusterGetKeystoreBackupOption"
    "clusterGetKeystoreHostName"
    "clusterGetKeystoreHostNames"
    "clusterGetKeystoreKmipCAPath"
    "clusterGetKeystoreKmipCertificatePath"
    "clusterGetKeystoreKmipKeyPath"
    "clusterGetKeystoreKmsType"
    "clusterGetKeystoreP11DriverPath"
    "clusterGetKeystorePort"
    "clusterGetKeystorePorts"
    "clusterGetKeystoreWalletLocation"
    "clusterGetLanguageBaseline"
    "clusterGetLogsEncryption"
    "clusterGetLogsEncryptionKeyId"
    "clusterGetName"
    "clusterGetOpsdirectorConfig"
    "clusterGetOpsdirectorLogLevel"
    "clusterGetOpsdirectorMetering"
    "clusterGetOpsdirectorSessionEndpoint"
    "clusterGetSslFipsEnabled"
    "clusterGetXdqpBootstrapHosts"
    "clusterGetXdqpSslCertificate"
    "clusterGetXdqpSslPrivateKey"
    "clusterRotateConfigEncryptionKeyId"
    "clusterRotateDataEncryptionKeyId"
    "clusterRotateLogsEncryptionKeyId"
    "clusterSetConfigEncryption"
    "clusterSetConfigEncryptionKeyId"
    "clusterSetDataEncryption"
    "clusterSetDataEncryptionKeyId"
    "clusterSetExternalConfigEncryptionKeyId"
    "clusterSetExternalDataEncryptionKeyId"
    "clusterSetExternalLogsEncryptionKeyId"
    "clusterSetKeystoreBackupOption"
    "clusterSetKeystoreHostName"
    "clusterSetKeystoreHostNames"
    "clusterSetKeystoreKmipCAPath"
    "clusterSetKeystoreKmipCertificatePath"
    "clusterSetKeystoreKmipKeyPath"
    "clusterSetKeystoreKmsType"
    "clusterSetKeystoreLogsEncryptionPassphrase"
    "clusterSetKeystoreP11DriverPath"
    "clusterSetKeystorePassphrase"
    "clusterSetKeystorePort"
    "clusterSetKeystorePorts"
    "clusterSetKeystoreWalletLocation"
    "clusterSetLanguageBaseline"
    "clusterSetLogsEncryption"
    "clusterSetLogsEncryptionKeyId"
    "clusterSetName"
    "clusterSetOpsdirectorConfig"
    "clusterSetOpsdirectorLogLevel"
    "clusterSetOpsdirectorMetering"
    "clusterSetOpsdirectorSessionEndpoint"
    "clusterSetSslFipsEnabled"
    "clusterSetXdqpBootstrapHosts"
    "clusterSetXdqpSslCertificate"
    "clusterSetXdqpSslPrivateKey"
    "databaseAddBackup"
    "databaseAddDefaultRuleset"
    "databaseAddElementAttributeWordLexicon"
    "databaseAddElementWordLexicon"
    "databaseAddElementWordQueryThrough"
    "databaseAddField"
    "databaseAddFieldExcludedElement"
    "databaseAddFieldIncludedElement"
    "databaseAddFieldPaths"
    "databaseAddFieldTokenizerOverride"
    "databaseAddFieldWordLexicon"
    "databaseAddForeignDatabase"
    "databaseAddForeignReplicas"
    "databaseAddFragmentParent"
    "databaseAddFragmentRoot"
    "databaseAddGeospatialElementAttributePairIndex"
    "databaseAddGeospatialElementChildIndex"
    "databaseAddGeospatialElementIndex"
    "databaseAddGeospatialElementPairIndex"
    "databaseAddGeospatialPathIndex"
    "databaseAddGeospatialRegionPathIndex"
    "databaseAddMergeBlackout"
    "databaseAddPathNamespace"
    "databaseAddPhraseAround"
    "databaseAddPhraseThrough"
    "databaseAddRangeElementAttributeIndex"
    "databaseAddRangeElementIndex"
    "databaseAddRangeFieldIndex"
    "databaseAddRangePathIndex"
    "databaseAddWordLexicon"
    "databaseAddWordQueryExcludedElement"
    "databaseAddWordQueryIncludedElement"
    "databaseAttachForest"
    "databaseAttachSubDatabase"
    "databaseBackupGetEnabled"
    "databaseBackupSetEnabled"
    "databaseCopy"
    "databaseCreate"
    "databaseDailyBackup"
    "databaseDailyIncrementalBackup"
    "databaseDelete"
    "databaseDeleteAllRangeFieldIndexes"
    "databaseDeleteBackup"
    "databaseDeleteBackupById"
    "databaseDeleteDefaultRuleset"
    "databaseDeleteElementAttributeWordLexicon"
    "databaseDeleteElementWordLexicon"
    "databaseDeleteElementWordQueryThrough"
    "databaseDeleteField"
    "databaseDeleteFieldExcludedElement"
    "databaseDeleteFieldIncludedElement"
    "databaseDeleteFieldPaths"
    "databaseDeleteFieldTokenizerOverride"
    "databaseDeleteFieldWordLexicon"
    "databaseDeleteForeignMaster"
    "databaseDeleteForeignReplicas"
    "databaseDeleteFragmentParent"
    "databaseDeleteFragmentRoot"
    "databaseDeleteGeospatialElementAttributePairIndex"
    "databaseDeleteGeospatialElementChildIndex"
    "databaseDeleteGeospatialElementIndex"
    "databaseDeleteGeospatialElementPairIndex"
    "databaseDeleteGeospatialPathIndex"
    "databaseDeleteGeospatialRegionPathIndex"
    "databaseDeleteMergeBlackout"
    "databaseDeletePathNamespace"
    "databaseDeletePhraseAround"
    "databaseDeletePhraseThrough"
    "databaseDeleteRangeElementAttributeIndex"
    "databaseDeleteRangeElementIndex"
    "databaseDeleteRangeFieldIndex"
    "databaseDeleteRangePathIndex"
    "databaseDeleteWordLexicon"
    "databaseDeleteWordQueryExcludedElement"
    "databaseDeleteWordQueryIncludedElement"
    "databaseDetachForest"
    "databaseDetachSubDatabase"
    "databaseElementAttributeReference"
    "databaseElementAttributeWordLexicon"
    "databaseElementReference"
    "databaseElementWordLexicon"
    "databaseElementWordQueryThrough"
    "databaseEmployForest"
    "databaseExcludedElement"
    "databaseExists"
    "databaseField"
    "databaseFieldPath"
    "databaseFieldReference"
    "databaseForeignMaster"
    "databaseForeignMasterGetClusterId"
    "databaseForeignMasterGetConnectForestsByName"
    "databaseForeignMasterGetDatabaseId"
    "databaseForeignReplica"
    "databaseForeignReplicaGetClusterId"
    "databaseForeignReplicaGetConnectForestsByName"
    "databaseForeignReplicaGetDatabaseId"
    "databaseForeignReplicaGetLagLimit"
    "databaseForeignReplicaGetQueueSize"
    "databaseForeignReplicaGetReplicationEnabled"
    "databaseForeignReplicaSetLagLimit"
    "databaseForeignReplicaSetQueueSize"
    "databaseForeignReplicaSetReplicationEnabled"
    "databaseFragmentParent"
    "databaseFragmentRoot"
    "databaseGeospatialElementAttributePairIndex"
    "databaseGeospatialElementChildIndex"
    "databaseGeospatialElementIndex"
    "databaseGeospatialElementPairIndex"
    "databaseGeospatialPathIndex"
    "databaseGeospatialRegionPathIndex"
    "databaseGetAssignmentPolicy"
    "databaseGetAttachedForests"
    "databaseGetAttributeValuePositions"
    "databaseGetBackups"
    "databaseGetCollectionLexicon"
    "databaseGetConfigForForeignMasterOnForeignCluster"
    "databaseGetConfigForForeignReplicasOnForeignCluster"
    "databaseGetDataEncryption"
    "databaseGetDefaultRulesets"
    "databaseGetDirectoryCreation"
    "databaseGetElementAttributeWordLexicons"
    "databaseGetElementValuePositions"
    "databaseGetElementWordLexicons"
    "databaseGetElementWordPositions"
    "databaseGetElementWordQueryThroughs"
    "databaseGetEnabled"
    "databaseGetEncryptionKeyId"
    "databaseGetExpungeLocks"
    "databaseGetFastCaseSensitiveSearches"
    "databaseGetFastDiacriticSensitiveSearches"
    "databaseGetFastElementCharacterSearches"
    "databaseGetFastElementPhraseSearches"
    "databaseGetFastElementTrailingWildcardSearches"
    "databaseGetFastElementWordSearches"
    "databaseGetFastPhraseSearches"
    "databaseGetFastReverseSearches"
    "databaseGetField"
    "databaseGetFieldExcludedElements"
    "databaseGetFieldFastCaseSensitiveSearches"
    "databaseGetFieldFastDiacriticSensitiveSearches"
    "databaseGetFieldFastPhraseSearches"
    "databaseGetFieldIncludeDocumentRoot"
    "databaseGetFieldIncludedElements"
    "databaseGetFieldOneCharacterSearches"
    "databaseGetFieldPaths"
    "databaseGetFieldStemmedSearches"
    "databaseGetFieldThreeCharacterSearches"
    "databaseGetFieldThreeCharacterWordPositions"
    "databaseGetFieldTokenizerOverrides"
    "databaseGetFieldTrailingWildcardSearches"
    "databaseGetFieldTrailingWildcardWordPositions"
    "databaseGetFieldTwoCharacterSearches"
    "databaseGetFieldValuePositions"
    "databaseGetFieldValueSearches"
    "databaseGetFieldWordLexicons"
    "databaseGetFieldWordSearches"
    "databaseGetFields"
    "databaseGetForeignMaster"
    "databaseGetForeignReplicas"
    "databaseGetFormatCompatibility"
    "databaseGetFragmentParents"
    "databaseGetFragmentRoots"
    "databaseGetGeospatialElementAttributePairIndexes"
    "databaseGetGeospatialElementChildIndexes"
    "databaseGetGeospatialElementIndexes"
    "databaseGetGeospatialElementPairIndexes"
    "databaseGetGeospatialPathIndexes"
    "databaseGetGeospatialRegionPathIndexes"
    "databaseGetId"
    "databaseGetInMemoryGeospatialRegionIndexSize"
    "databaseGetInMemoryLimit"
    "databaseGetInMemoryListSize"
    "databaseGetInMemoryRangeIndexSize"
    "databaseGetInMemoryReverseIndexSize"
    "databaseGetInMemoryTreeSize"
    "databaseGetInMemoryTripleIndexSize"
    "databaseGetIndexDetection"
    "databaseGetInheritCollections"
    "databaseGetInheritPermissions"
    "databaseGetInheritQuality"
    "databaseGetJournalSize"
    "databaseGetJournaling"
    "databaseGetLanguage"
    "databaseGetLargeSizeThreshold"
    "databaseGetLocking"
    "databaseGetMaintainDirectoryLastModified"
    "databaseGetMaintainLastModified"
    "databaseGetMergeBlackouts"
    "databaseGetMergeMaxSize"
    "databaseGetMergeMinRatio"
    "databaseGetMergeMinSize"
    "databaseGetMergePriority"
    "databaseGetMergeTimestamp"
    "databaseGetName"
    "databaseGetOneCharacterSearches"
    "databaseGetPathNamespaces"
    "databaseGetPhraseArounds"
    "databaseGetPhraseThroughs"
    "databaseGetPositionsListMaxSize"
    "databaseGetPreallocateJournals"
    "databaseGetPreloadMappedData"
    "databaseGetPreloadReplicaMappedData"
    "databaseGetRangeElementAttributeIndexes"
    "databaseGetRangeElementIndexes"
    "databaseGetRangeFieldIndexes"
    "databaseGetRangeIndexOptimize"
    "databaseGetRangePathIndexes"
    "databaseGetRangePolicyPartitionKey"
    "databaseGetRebalancerEnable"
    "databaseGetRebalancerThrottle"
    "databaseGetReindexerEnable"
    "databaseGetReindexerThrottle"
    "databaseGetReindexerTimestamp"
    "databaseGetRetainUntilBackup"
    "databaseGetRetiredForests"
    "databaseGetSchemaDatabase"
    "databaseGetSecurityDatabase"
    "databaseGetStemmedSearches"
    "databaseGetTfNormalization"
    "databaseGetThreeCharacterSearches"
    "databaseGetThreeCharacterWordPositions"
    "databaseGetTrailingWildcardSearches"
    "databaseGetTrailingWildcardWordPositions"
    "databaseGetTriggersDatabase"
    "databaseGetTripleIndex"
    "databaseGetTriplePositions"
    "databaseGetTwoCharacterSearches"
    "databaseGetUriLexicon"
    "databaseGetWordLexicons"
    "databaseGetWordPositions"
    "databaseGetWordQueryExcludedElements"
    "databaseGetWordQueryFastCaseSensitiveSearches"
    "databaseGetWordQueryFastDiacriticSensitiveSearches"
    "databaseGetWordQueryFastPhraseSearches"
    "databaseGetWordQueryIncludeDocumentRoot"
    "databaseGetWordQueryIncludedElements"
    "databaseGetWordQueryOneCharacterSearches"
    "databaseGetWordQueryStemmedSearches"
    "databaseGetWordQueryThreeCharacterSearches"
    "databaseGetWordQueryThreeCharacterWordPositions"
    "databaseGetWordQueryTrailingWildcardSearches"
    "databaseGetWordQueryTrailingWildcardWordPositions"
    "databaseGetWordQueryTwoCharacterSearches"
    "databaseGetWordQueryWordSearches"
    "databaseGetWordSearches"
    "databaseHourlyBackup"
    "databaseHourlyIncrementalBackup"
    "databaseInUsePathNamespacePrefixes"
    "databaseIncludedElement"
    "databaseIsForestEmployed"
    "databaseIsForestRetired"
    "databaseMetadataField"
    "databaseMinutelyBackup"
    "databaseMinutelyIncrementalBackup"
    "databaseMonthlyBackup"
    "databaseMonthlyIncrementalBackup"
    "databaseOneTimeBackup"
    "databaseOneTimeIncrementalBackup"
    "databaseOneTimeMergeBlackout"
    "databasePathField"
    "databasePathNamespace"
    "databasePathReference"
    "databasePhraseAround"
    "databasePhraseThrough"
    "databaseRangeElementAttributeIndex"
    "databaseRangeElementIndex"
    "databaseRangeFieldIndex"
    "databaseRangePathIndex"
    "databaseRecurringMergeBlackout"
    "databaseRemoveForeignDatabase"
    "databaseReorderForests"
    "databaseRetireForest"
    "databaseRuleset"
    "databaseSetAssignmentPolicy"
    "databaseSetAttributeValuePositions"
    "databaseSetCollectionLexicon"
    "databaseSetDataEncryption"
    "databaseSetDirectoryCreation"
    "databaseSetElementValuePositions"
    "databaseSetElementWordPositions"
    "databaseSetEnabled"
    "databaseSetEncryptionKeyId"
    "databaseSetExpungeLocks"
    "databaseSetFastCaseSensitiveSearches"
    "databaseSetFastDiacriticSensitiveSearches"
    "databaseSetFastElementCharacterSearches"
    "databaseSetFastElementPhraseSearches"
    "databaseSetFastElementTrailingWildcardSearches"
    "databaseSetFastElementWordSearches"
    "databaseSetFastPhraseSearches"
    "databaseSetFastReverseSearches"
    "databaseSetFieldFastCaseSensitiveSearches"
    "databaseSetFieldFastDiacriticSensitiveSearches"
    "databaseSetFieldFastPhraseSearches"
    "databaseSetFieldIncludeDocumentRoot"
    "databaseSetFieldName"
    "databaseSetFieldOneCharacterSearches"
    "databaseSetFieldStemmedSearches"
    "databaseSetFieldThreeCharacterSearches"
    "databaseSetFieldThreeCharacterWordPositions"
    "databaseSetFieldTrailingWildcardSearches"
    "databaseSetFieldTrailingWildcardWordPositions"
    "databaseSetFieldTwoCharacterSearches"
    "databaseSetFieldValuePositions"
    "databaseSetFieldValueSearches"
    "databaseSetFieldWordSearches"
    "databaseSetForeignMaster"
    "databaseSetForeignReplicas"
    "databaseSetFormatCompatibility"
    "databaseSetInMemoryGeospatialRegionIndexSize"
    "databaseSetInMemoryLimit"
    "databaseSetInMemoryListSize"
    "databaseSetInMemoryRangeIndexSize"
    "databaseSetInMemoryReverseIndexSize"
    "databaseSetInMemoryTreeSize"
    "databaseSetInMemoryTripleIndexSize"
    "databaseSetIndexDetection"
    "databaseSetInheritCollections"
    "databaseSetInheritPermissions"
    "databaseSetInheritQuality"
    "databaseSetJournalSize"
    "databaseSetJournaling"
    "databaseSetLanguage"
    "databaseSetLargeSizeThreshold"
    "databaseSetLocking"
    "databaseSetMaintainDirectoryLastModified"
    "databaseSetMaintainLastModified"
    "databaseSetMergeMaxSize"
    "databaseSetMergeMinRatio"
    "databaseSetMergeMinSize"
    "databaseSetMergePriority"
    "databaseSetMergeTimestamp"
    "databaseSetName"
    "databaseSetOneCharacterSearches"
    "databaseSetPositionsListMaxSize"
    "databaseSetPreallocateJournals"
    "databaseSetPreloadMappedData"
    "databaseSetPreloadReplicaMappedData"
    "databaseSetRangeIndexOptimize"
    "databaseSetRebalancerEnable"
    "databaseSetRebalancerThrottle"
    "databaseSetReindexerEnable"
    "databaseSetReindexerThrottle"
    "databaseSetReindexerTimestamp"
    "databaseSetRetainUntilBackup"
    "databaseSetSchemaDatabase"
    "databaseSetSecurityDatabase"
    "databaseSetStemmedSearches"
    "databaseSetTfNormalization"
    "databaseSetThreeCharacterSearches"
    "databaseSetThreeCharacterWordPositions"
    "databaseSetTrailingWildcardSearches"
    "databaseSetTrailingWildcardWordPositions"
    "databaseSetTriggersDatabase"
    "databaseSetTripleIndex"
    "databaseSetTriplePositions"
    "databaseSetTwoCharacterSearches"
    "databaseSetUriLexicon"
    "databaseSetWordPositions"
    "databaseSetWordQueryFastCaseSensitiveSearches"
    "databaseSetWordQueryFastDiacriticSensitiveSearches"
    "databaseSetWordQueryFastPhraseSearches"
    "databaseSetWordQueryIncludeDocumentRoot"
    "databaseSetWordQueryOneCharacterSearches"
    "databaseSetWordQueryStemmedSearches"
    "databaseSetWordQueryThreeCharacterSearches"
    "databaseSetWordQueryThreeCharacterWordPositions"
    "databaseSetWordQueryTrailingWildcardSearches"
    "databaseSetWordQueryTrailingWildcardWordPositions"
    "databaseSetWordQueryTwoCharacterSearches"
    "databaseSetWordQueryWordSearches"
    "databaseSetWordSearches"
    "databaseSubDatabases"
    "databaseSuperDatabases"
    "databaseTokenizerOverride"
    "databaseValidateFieldPath"
    "databaseValidateFieldPaths"
    "databaseValidatePathExpression"
    "databaseValidatePathFields"
    "databaseValidatePathNamespaces"
    "databaseWeeklyBackup"
    "databaseWeeklyIncrementalBackup"
    "databaseWordLexicon"
    "foreignClusterCreate"
    "foreignClusterDelete"
    "foreignClusterGetBootstrapHosts"
    "foreignClusterGetHostTimeout"
    "foreignClusterGetName"
    "foreignClusterGetSslCertificate"
    "foreignClusterGetXdqpSslAllowSslv3"
    "foreignClusterGetXdqpSslAllowTls"
    "foreignClusterGetXdqpSslCiphers"
    "foreignClusterGetXdqpSslEnabled"
    "foreignClusterGetXdqpTimeout"
    "foreignClusterReplace"
    "foreignClusterSetBootstrapHosts"
    "foreignClusterSetHostTimeout"
    "foreignClusterSetName"
    "foreignClusterSetSslCertificate"
    "foreignClusterSetXdqpSslAllowSslv3"
    "foreignClusterSetXdqpSslAllowTls"
    "foreignClusterSetXdqpSslCiphers"
    "foreignClusterSetXdqpSslEnabled"
    "foreignClusterSetXdqpTimeout"
    "foreignHost"
    "foreignHostGetConnectPort"
    "foreignHostGetId"
    "foreignHostGetName"
    "forestAddBackup"
    "forestAddFailoverHost"
    "forestAddForeignReplicas"
    "forestAddReplica"
    "forestBackupGetEnabled"
    "forestBackupSetEnabled"
    "forestCopy"
    "forestCreate"
    "forestDailyBackup"
    "forestDelete"
    "forestDeleteBackup"
    "forestDeleteBackupById"
    "forestDeleteFailoverHost"
    "forestDeleteForeignMaster"
    "forestDeleteForeignReplicas"
    "forestExists"
    "forestForeignMaster"
    "forestForeignMasterGetClusterId"
    "forestForeignMasterGetDatabaseId"
    "forestForeignMasterGetForestId"
    "forestForeignReplica"
    "forestForeignReplicaGetClusterId"
    "forestForeignReplicaGetDatabaseId"
    "forestForeignReplicaGetForestId"
    "forestGetAvailability"
    "forestGetBackups"
    "forestGetDataDirectory"
    "forestGetDatabase"
    "forestGetEnabled"
    "forestGetFailoverEnable"
    "forestGetFailoverHosts"
    "forestGetFastDataDirectory"
    "forestGetFastDataMaxSize"
    "forestGetForeignMaster"
    "forestGetForeignReplicas"
    "forestGetHost"
    "forestGetId"
    "forestGetLargeDataDirectory"
    "forestGetName"
    "forestGetPartitionNumber"
    "forestGetRangePolicyLowerBound"
    "forestGetRangePolicyUpperBound"
    "forestGetRebalancerEnable"
    "forestGetReplicas"
    "forestGetUpdatesAllowed"
    "forestHourlyBackup"
    "forestIsRangePolicyRangeSet"
    "forestMinutelyBackup"
    "forestMonthlyBackup"
    "forestOneTimeBackup"
    "forestRemoveReplica"
    "forestRename"
    "forestSetAvailability"
    "forestSetEnabled"
    "forestSetFailoverEnable"
    "forestSetFastDataMaxSize"
    "forestSetForeignMaster"
    "forestSetForeignReplicas"
    "forestSetHost"
    "forestSetPartitionNumber"
    "forestSetRangePolicyRange"
    "forestSetRebalancerEnable"
    "forestSetUpdatesAllowed"
    "forestWeeklyBackup"
    "getAppserverIds"
    "getConfiguration"
    "getDatabaseIds"
    "getForestIds"
    "getGroupIds"
    "getHostIds"
    "groupAddModuleLocation"
    "groupAddNamespace"
    "groupAddScheduledTask"
    "groupAddSchema"
    "groupAddTraceEvent"
    "groupAddUsingNamespace"
    "groupCopy"
    "groupCreate"
    "groupDailyScheduledTask"
    "groupDelete"
    "groupDeleteModuleLocation"
    "groupDeleteNamespace"
    "groupDeleteScheduledTask"
    "groupDeleteScheduledTaskById"
    "groupDeleteSchema"
    "groupDeleteTraceEvent"
    "groupDeleteUsingNamespace"
    "groupDisableAuditEventType"
    "groupEnableAuditEventType"
    "groupExists"
    "groupGetAppserverIds"
    "groupGetAuditEnabled"
    "groupGetAuditEventTypeEnabled"
    "groupGetAuditExcludedRoles"
    "groupGetAuditExcludedUris"
    "groupGetAuditExcludedUsers"
    "groupGetAuditIncludedRoles"
    "groupGetAuditIncludedUris"
    "groupGetAuditIncludedUsers"
    "groupGetAuditOutcomeRestriction"
    "groupGetBackgroundIoLimit"
    "groupGetCacheSizing"
    "groupGetCompressedTreeCachePartitions"
    "groupGetCompressedTreeCacheSize"
    "groupGetCompressedTreeReadSize"
    "groupGetExpandedTreeCachePartitions"
    "groupGetExpandedTreeCacheSize"
    "groupGetFailoverEnable"
    "groupGetFileLogLevel"
    "groupGetHostIds"
    "groupGetHostInitialTimeout"
    "groupGetHostTimeout"
    "groupGetHttpTimeout"
    "groupGetHttpUserAgent"
    "groupGetHttpserverIds"
    "groupGetId"
    "groupGetKeepAuditFiles"
    "groupGetKeepLogFiles"
    "groupGetListCachePartitions"
    "groupGetListCacheSize"
    "groupGetMeteringEnabled"
    "groupGetMetersDatabase"
    "groupGetModuleCacheTimeout"
    "groupGetModuleLocations"
    "groupGetName"
    "groupGetNamespaces"
    "groupGetOdbcserverIds"
    "groupGetPerformanceMeteringEnabled"
    "groupGetPerformanceMeteringPeriod"
    "groupGetPerformanceMeteringRetainDaily"
    "groupGetPerformanceMeteringRetainHourly"
    "groupGetPerformanceMeteringRetainRaw"
    "groupGetRetryTimeout"
    "groupGetRotateAuditFiles"
    "groupGetRotateLogFiles"
    "groupGetS3Domain"
    "groupGetS3Protocol"
    "groupGetS3ServerSideEncryption"
    "groupGetS3ServerSideEncryptionKmsKey"
    "groupGetScheduledTask"
    "groupGetScheduledTasks"
    "groupGetSchemas"
    "groupGetSecurityDatabase"
    "groupGetSmtpRelay"
    "groupGetSmtpTimeout"
    "groupGetSystemLogLevel"
    "groupGetTaskserverId"
    "groupGetTelemetryConfig"
    "groupGetTelemetryLogLevel"
    "groupGetTelemetryMetering"
    "groupGetTelemetryProxy"
    "groupGetTelemetrySessionEndpoint"
    "groupGetTraceEvents"
    "groupGetTraceEventsActivated"
    "groupGetTripleCachePartitions"
    "groupGetTripleCacheSize"
    "groupGetTripleCacheTimeout"
    "groupGetTripleValueCachePartitions"
    "groupGetTripleValueCacheSize"
    "groupGetTripleValueCacheTimeout"
    "groupGetUsingNamespaces"
    "groupGetWebdavserverIds"
    "groupGetXdbcserverIds"
    "groupGetXdqpSslAllowSslv3"
    "groupGetXdqpSslAllowTls"
    "groupGetXdqpSslCiphers"
    "groupGetXdqpSslDisabledProtocols"
    "groupGetXdqpSslEnabled"
    "groupGetXdqpTimeout"
    "groupHourlyScheduledTask"
    "groupMinutelyScheduledTask"
    "groupModuleLocation"
    "groupMonthlyScheduledTask"
    "groupNamespace"
    "groupOneTimeScheduledTask"
    "groupScheduledTaskGetEnabled"
    "groupScheduledTaskSetEnabled"
    "groupSchema"
    "groupSetAuditEnabled"
    "groupSetAuditOutcomeRestriction"
    "groupSetAuditRoleRestriction"
    "groupSetAuditUriRestriction"
    "groupSetAuditUserRestriction"
    "groupSetBackgroundIoLimit"
    "groupSetCacheSizing"
    "groupSetCompressedTreeCachePartitions"
    "groupSetCompressedTreeCacheSize"
    "groupSetCompressedTreeReadSize"
    "groupSetExpandedTreeCachePartitions"
    "groupSetExpandedTreeCacheSize"
    "groupSetFailoverEnable"
    "groupSetFileLogLevel"
    "groupSetHostInitialTimeout"
    "groupSetHostTimeout"
    "groupSetHttpTimeout"
    "groupSetHttpUserAgent"
    "groupSetKeepAuditFiles"
    "groupSetKeepLogFiles"
    "groupSetListCachePartitions"
    "groupSetListCacheSize"
    "groupSetMeteringEnabled"
    "groupSetMetersDatabase"
    "groupSetModuleCacheTimeout"
    "groupSetName"
    "groupSetPerformanceMeteringEnabled"
    "groupSetPerformanceMeteringPeriod"
    "groupSetPerformanceMeteringRetainDaily"
    "groupSetPerformanceMeteringRetainHourly"
    "groupSetPerformanceMeteringRetainRaw"
    "groupSetRetryTimeout"
    "groupSetRotateAuditFiles"
    "groupSetRotateLogFiles"
    "groupSetS3Domain"
    "groupSetS3Protocol"
    "groupSetS3ServerSideEncryption"
    "groupSetS3ServerSideEncryptionKmsKey"
    "groupSetSecurityDatabase"
    "groupSetSmtpRelay"
    "groupSetSmtpTimeout"
    "groupSetSystemLogLevel"
    "groupSetTelemetryConfig"
    "groupSetTelemetryLogLevel"
    "groupSetTelemetryMetering"
    "groupSetTelemetryProxy"
    "groupSetTelemetrySessionEndpoint"
    "groupSetTraceEventsActivated"
    "groupSetTripleCachePartitions"
    "groupSetTripleCacheSize"
    "groupSetTripleCacheTimeout"
    "groupSetTripleValueCachePartitions"
    "groupSetTripleValueCacheSize"
    "groupSetTripleValueCacheTimeout"
    "groupSetXdqpSslAllowSslv3"
    "groupSetXdqpSslAllowTls"
    "groupSetXdqpSslCiphers"
    "groupSetXdqpSslDisabledProtocols"
    "groupSetXdqpSslEnabled"
    "groupSetXdqpTimeout"
    "groupTraceEvent"
    "groupUsingNamespace"
    "groupWeeklyScheduledTask"
    "hostExists"
    "hostGetForeignPort"
    "hostGetGroup"
    "hostGetId"
    "hostGetMode"
    "hostGetModeDescription"
    "hostGetName"
    "hostGetPort"
    "hostGetZone"
    "hostSetForeignPort"
    "hostSetGroup"
    "hostSetMode"
    "hostSetName"
    "hostSetPort"
    "hostSetZone"
    "httpServerCreate"
    "legacyAssignmentPolicy"
    "mimetype"
    "mimetypesAdd"
    "mimetypesDelete"
    "mimetypesGet"
    "odbcServerCreate"
    "queryAssignmentPolicy"
    "rangeAssignmentPolicy"
    "restartHosts"
    "saveConfiguration"
    "saveConfigurationWithoutRestart"
    "segmentAssignmentPolicy"
    "statisticalAssignmentPolicy"
    "taskserverGetDebugAllow"
    "taskserverGetDebugThreads"
    "taskserverGetDefaultInferenceSize"
    "taskserverGetDefaultTimeLimit"
    "taskserverGetFileLogLevel"
    "taskserverGetLogErrors"
    "taskserverGetMaxInferenceSize"
    "taskserverGetMaxTimeLimit"
    "taskserverGetName"
    "taskserverGetPostCommitTriggerDepth"
    "taskserverGetPreCommitTriggerDepth"
    "taskserverGetPreCommitTriggerLimit"
    "taskserverGetProfileAllow"
    "taskserverGetQueueSize"
    "taskserverGetThreads"
    "taskserverSetDebugAllow"
    "taskserverSetDebugThreads"
    "taskserverSetDefaultInferenceSize"
    "taskserverSetDefaultTimeLimit"
    "taskserverSetFileLogLevel"
    "taskserverSetLogErrors"
    "taskserverSetMaxInferenceSize"
    "taskserverSetMaxTimeLimit"
    "taskserverSetPostCommitTriggerDepth"
    "taskserverSetPreCommitTriggerDepth"
    "taskserverSetPreCommitTriggerLimit"
    "taskserverSetProfileAllow"
    "taskserverSetQueueSize"
    "taskserverSetThreads"
    "webdavServerCreate"
    "xdbcServerCreate"))

(defconst company-marklogic-sjs-functions-alert
  '("actionGetDescription"
    "actionGetModule"
    "actionGetModuleDb"
    "actionGetModuleRoot"
    "actionGetName"
    "actionGetOptions"
    "actionInsert"
    "actionRemove"
    "actionSetDescription"
    "actionSetModule"
    "actionSetModuleDb"
    "actionSetModuleRoot"
    "actionSetName"
    "actionSetOptions"
    "configDelete"
    "configGet"
    "configGetCpfDomainIds"
    "configGetCpfDomainNames"
    "configGetDescription"
    "configGetId"
    "configGetName"
    "configGetOptions"
    "configGetTriggerIds"
    "configGetUri"
    "configInsert"
    "configSetCpfDomainIds"
    "configSetCpfDomainNames"
    "configSetDescription"
    "configSetName"
    "configSetOptions"
    "configSetTriggerIds"
    "configSetUri"
    "createTriggers"
    "findMatchingRules"
    "getActions"
    "getAllRules"
    "getMyRules"
    "invokeMatchingActions"
    "makeAction"
    "makeConfig"
    "makeLogAction"
    "makeRule"
    "removeTriggers"
    "ruleActionQuery"
    "ruleGetAction"
    "ruleGetDescription"
    "ruleGetId"
    "ruleGetName"
    "ruleGetOptions"
    "ruleGetQuery"
    "ruleGetUserId"
    "ruleIdQuery"
    "ruleInsert"
    "ruleNameQuery"
    "ruleRemove"
    "ruleSetAction"
    "ruleSetDescription"
    "ruleSetName"
    "ruleSetOptions"
    "ruleSetQuery"
    "ruleSetUserId"
    "ruleUserIdQuery"
    "spawnMatchingActions"))

(defconst company-marklogic-sjs-functions-cdict
  '("dictionaryDelete"
    "dictionaryRead"
    "dictionaryWrite"
    "getLanguages"))

(defconst company-marklogic-sjs-functions-clang
  '("deleteUserLanguage"
    "languageConfigDelete"
    "languageConfigRead"
    "languageConfigWrite"
    "lexer"
    "stemmer"
    "updateUserLanguage"
    "userLanguage"
    "userLanguagePlugin"))

(defconst company-marklogic-sjs-functions-cma
  '("applyConfig"
    "generateConfig"))

(defconst company-marklogic-sjs-functions-cpf
  '("checkTransition"
    "documentGetError"
    "documentGetLastUpdated"
    "documentGetProcessingStatus"
    "documentGetState"
    "documentSetError"
    "documentSetLastUpdated"
    "documentSetProcessingStatus"
    "documentSetState"
    "failure"
    "success"))

(defconst company-marklogic-sjs-functions-css
  '("convert"
    "get"))

(defconst company-marklogic-sjs-functions-cts
  '("afterQuery"
    "afterQueryTimestamp"
    "aggregate"
    "andNotQuery"
    "andNotQueryNegativeQuery"
    "andNotQueryPositiveQuery"
    "andQuery"
    "andQueryOptions"
    "andQueryQueries"
    "approxCenter"
    "arcIntersection"
    "avg"
    "avgAggregate"
    "bearing"
    "beforeQuery"
    "beforeQueryTimestamp"
    "boostQuery"
    "boostQueryBoostingQuery"
    "boostQueryMatchingQuery"
    "boundingBoxes"
    "box"
    "boxEast"
    "boxIntersects"
    "boxNorth"
    "boxSouth"
    "boxWest"
    "circle"
    "circleCenter"
    "circleIntersects"
    "circleRadius"
    "classify"
    "cluster"
    "collectionMatch"
    "collectionQuery"
    "collectionQueryUris"
    "collectionReference"
    "collections"
    "complexPolygon"
    "complexPolygonContains"
    "complexPolygonInner"
    "complexPolygonIntersects"
    "complexPolygonOuter"
    "confidence"
    "confidenceOrder"
    "contains"
    "correlation"
    "count"
    "countAggregate"
    "covariance"
    "covarianceP"
    "deregister"
    "destination"
    "directoryQuery"
    "directoryQueryDepth"
    "directoryQueryUris"
    "distance"
    "distinctiveTerms"
    "doc"
    "documentFragmentQuery"
    "documentFragmentQueryQuery"
    "documentOrder"
    "documentQuery"
    "documentQueryUris"
    "elementAttributePairGeospatialBoxes"
    "elementAttributePairGeospatialQuery"
    "elementAttributePairGeospatialQueryElementName"
    "elementAttributePairGeospatialQueryLatitudeName"
    "elementAttributePairGeospatialQueryLongitudeName"
    "elementAttributePairGeospatialQueryOptions"
    "elementAttributePairGeospatialQueryRegion"
    "elementAttributePairGeospatialQueryWeight"
    "elementAttributePairGeospatialValueMatch"
    "elementAttributePairGeospatialValues"
    "elementAttributeRangeQuery"
    "elementAttributeRangeQueryAttributeName"
    "elementAttributeRangeQueryElementName"
    "elementAttributeRangeQueryOperator"
    "elementAttributeRangeQueryOptions"
    "elementAttributeRangeQueryValue"
    "elementAttributeRangeQueryWeight"
    "elementAttributeReference"
    "elementAttributeValueCoOccurrences"
    "elementAttributeValueGeospatialCoOccurrences"
    "elementAttributeValueMatch"
    "elementAttributeValueQuery"
    "elementAttributeValueQueryAttributeName"
    "elementAttributeValueQueryElementName"
    "elementAttributeValueQueryOptions"
    "elementAttributeValueQueryText"
    "elementAttributeValueQueryWeight"
    "elementAttributeValueRanges"
    "elementAttributeValues"
    "elementAttributeWordMatch"
    "elementAttributeWordQuery"
    "elementAttributeWordQueryAttributeName"
    "elementAttributeWordQueryElementName"
    "elementAttributeWordQueryOptions"
    "elementAttributeWordQueryText"
    "elementAttributeWordQueryWeight"
    "elementAttributeWords"
    "elementChildGeospatialBoxes"
    "elementChildGeospatialQuery"
    "elementChildGeospatialQueryChildName"
    "elementChildGeospatialQueryElementName"
    "elementChildGeospatialQueryOptions"
    "elementChildGeospatialQueryRegion"
    "elementChildGeospatialQueryWeight"
    "elementChildGeospatialValueMatch"
    "elementChildGeospatialValues"
    "elementGeospatialBoxes"
    "elementGeospatialQuery"
    "elementGeospatialQueryElementName"
    "elementGeospatialQueryOptions"
    "elementGeospatialQueryRegion"
    "elementGeospatialQueryWeight"
    "elementGeospatialValueMatch"
    "elementGeospatialValues"
    "elementPairGeospatialBoxes"
    "elementPairGeospatialQuery"
    "elementPairGeospatialQueryElementName"
    "elementPairGeospatialQueryLatitudeName"
    "elementPairGeospatialQueryLongitudeName"
    "elementPairGeospatialQueryOptions"
    "elementPairGeospatialQueryRegion"
    "elementPairGeospatialQueryWeight"
    "elementPairGeospatialValueMatch"
    "elementPairGeospatialValues"
    "elementQuery"
    "elementQueryElementName"
    "elementQueryQuery"
    "elementRangeQuery"
    "elementRangeQueryElementName"
    "elementRangeQueryOperator"
    "elementRangeQueryOptions"
    "elementRangeQueryValue"
    "elementRangeQueryWeight"
    "elementReference"
    "elementValueCoOccurrences"
    "elementValueGeospatialCoOccurrences"
    "elementValueMatch"
    "elementValueQuery"
    "elementValueQueryElementName"
    "elementValueQueryOptions"
    "elementValueQueryText"
    "elementValueQueryWeight"
    "elementValueRanges"
    "elementValues"
    "elementWalk"
    "elementWalk"
    "elementWordMatch"
    "elementWordQuery"
    "elementWordQueryElementName"
    "elementWordQueryOptions"
    "elementWordQueryText"
    "elementWordQueryWeight"
    "elementWords"
    "entity"
    "entityDictionary"
    "entityDictionaryGet"
    "entityDictionaryParse"
    "entityHighlight"
    "entityWalk"
    "estimate"
    "exists"
    "falseQuery"
    "fieldRangeQuery"
    "fieldRangeQueryFieldName"
    "fieldRangeQueryOperator"
    "fieldRangeQueryOptions"
    "fieldRangeQueryValue"
    "fieldRangeQueryWeight"
    "fieldReference"
    "fieldValueCoOccurrences"
    "fieldValueMatch"
    "fieldValueQuery"
    "fieldValueQueryFieldName"
    "fieldValueQueryOptions"
    "fieldValueQueryText"
    "fieldValueQueryWeight"
    "fieldValueRanges"
    "fieldValues"
    "fieldWordMatch"
    "fieldWordQuery"
    "fieldWordQueryFieldName"
    "fieldWordQueryOptions"
    "fieldWordQueryText"
    "fieldWordQueryWeight"
    "fieldWords"
    "fitness"
    "fitnessOrder"
    "frequency"
    "geospatialAttributePairReference"
    "geospatialBoxes"
    "geospatialCoOccurrences"
    "geospatialElementChildReference"
    "geospatialElementPairReference"
    "geospatialElementReference"
    "geospatialJsonPropertyChildReference"
    "geospatialJsonPropertyPairReference"
    "geospatialJsonPropertyReference"
    "geospatialPathReference"
    "geospatialRegionPathReference"
    "geospatialRegionQuery"
    "geospatialRegionQueryOperation"
    "geospatialRegionQueryOptions"
    "geospatialRegionQueryReference"
    "geospatialRegionQueryRegion"
    "geospatialRegionQueryWeight"
    "highlight"
    "highlight"
    "indexOrder"
    "jsonPropertyChildGeospatialQuery"
    "jsonPropertyChildGeospatialQueryChildName"
    "jsonPropertyChildGeospatialQueryOptions"
    "jsonPropertyChildGeospatialQueryPropertyName"
    "jsonPropertyChildGeospatialQueryRegion"
    "jsonPropertyChildGeospatialQueryWeight"
    "jsonPropertyGeospatialQuery"
    "jsonPropertyGeospatialQueryOptions"
    "jsonPropertyGeospatialQueryPropertyName"
    "jsonPropertyGeospatialQueryRegion"
    "jsonPropertyGeospatialQueryWeight"
    "jsonPropertyPairGeospatialQuery"
    "jsonPropertyPairGeospatialQueryLatitudeName"
    "jsonPropertyPairGeospatialQueryLongitudeName"
    "jsonPropertyPairGeospatialQueryOptions"
    "jsonPropertyPairGeospatialQueryPropertyName"
    "jsonPropertyPairGeospatialQueryRegion"
    "jsonPropertyPairGeospatialQueryWeight"
    "jsonPropertyRangeQuery"
    "jsonPropertyRangeQueryOperator"
    "jsonPropertyRangeQueryOptions"
    "jsonPropertyRangeQueryPropertyName"
    "jsonPropertyRangeQueryValue"
    "jsonPropertyRangeQueryWeight"
    "jsonPropertyReference"
    "jsonPropertyScopeQuery"
    "jsonPropertyScopeQueryPropertyName"
    "jsonPropertyScopeQueryQuery"
    "jsonPropertyValueQuery"
    "jsonPropertyValueQueryOptions"
    "jsonPropertyValueQueryPropertyName"
    "jsonPropertyValueQueryText"
    "jsonPropertyValueQueryValue"
    "jsonPropertyValueQueryWeight"
    "jsonPropertyWordMatch"
    "jsonPropertyWordQuery"
    "jsonPropertyWordQueryOptions"
    "jsonPropertyWordQueryPropertyName"
    "jsonPropertyWordQueryText"
    "jsonPropertyWordQueryWeight"
    "jsonPropertyWords"
    "linearModel"
    "linestring"
    "linestringVertices"
    "locksFragmentQuery"
    "locksFragmentQueryQuery"
    "lsqtQuery"
    "lsqtQueryOptions"
    "lsqtQueryTemporalCollection"
    "lsqtQueryTimestamp"
    "lsqtQueryWeight"
    "matchRegions"
    "max"
    "median"
    "min"
    "nearQuery"
    "nearQueryDistance"
    "nearQueryOptions"
    "nearQueryQueries"
    "nearQueryWeight"
    "notInQuery"
    "notInQueryNegativeQuery"
    "notInQueryPositiveQuery"
    "notQuery"
    "notQueryQuery"
    "notQueryWeight"
    "orQuery"
    "orQueryOptions"
    "orQueryQueries"
    "parse"
    "parseWkt"
    "partOfSpeech"
    "pathGeospatialQuery"
    "pathGeospatialQueryOptions"
    "pathGeospatialQueryPathExpression"
    "pathGeospatialQueryRegion"
    "pathGeospatialQueryWeight"
    "pathRangeQuery"
    "pathRangeQueryOperator"
    "pathRangeQueryOptions"
    "pathRangeQueryPathName"
    "pathRangeQueryValue"
    "pathRangeQueryWeight"
    "pathReference"
    "percentRank"
    "percentile"
    "period"
    "periodCompare"
    "periodCompareQuery"
    "periodCompareQueryAxis1"
    "periodCompareQueryAxis2"
    "periodCompareQueryOperator"
    "periodCompareQueryOptions"
    "periodRangeQuery"
    "periodRangeQueryAxis"
    "periodRangeQueryOperator"
    "periodRangeQueryOptions"
    "periodRangeQueryPeriod"
    "plan"
    "point"
    "pointLatitude"
    "pointLongitude"
    "polygon"
    "polygonContains"
    "polygonIntersects"
    "polygonVertices"
    "propertiesFragmentQuery"
    "propertiesFragmentQueryQuery"
    "quality"
    "qualityOrder"
    "query"
    "rangeQuery"
    "rangeQueryIndex"
    "rangeQueryOperator"
    "rangeQueryOptions"
    "rangeQueryValue"
    "rangeQueryWeight"
    "rank"
    "referenceCollation"
    "referenceCoordinateSystem"
    "referenceNullable"
    "referenceParse"
    "referenceScalarType"
    "regionContains"
    "regionIntersects"
    "register"
    "registeredQuery"
    "registeredQueryIds"
    "registeredQueryOptions"
    "registeredQueryWeight"
    "relevanceInfo"
    "remainder"
    "reverseQuery"
    "reverseQueryNodes"
    "reverseQueryWeight"
    "score"
    "scoreOrder"
    "search"
    "shortestDistance"
    "similarQuery"
    "similarQueryNodes"
    "similarQueryWeight"
    "stddev"
    "stddevP"
    "stem"
    "sum"
    "sumAggregate"
    "thresholds"
    "toWkt"
    "tokenize"
    "train"
    "tripleRangeQuery"
    "tripleRangeQueryObject"
    "tripleRangeQueryOperator"
    "tripleRangeQueryOptions"
    "tripleRangeQueryPredicate"
    "tripleRangeQuerySubject"
    "tripleRangeQueryWeight"
    "tripleValueStatistics"
    "triples"
    "trueQuery"
    "unordered"
    "uriMatch"
    "uriReference"
    "uris"
    "validDocumentPatchPath"
    "validExtractPath"
    "validIndexPath"
    "validOpticPath"
    "validTdeContext"
    "valueCoOccurrences"
    "valueMatch"
    "valueRanges"
    "valueTuples"
    "values"
    "variance"
    "varianceP"
    "walk"
    "walk"
    "wordMatch"
    "wordQuery"
    "wordQueryOptions"
    "wordQueryText"
    "wordQueryWeight"
    "words"))

(defconst company-marklogic-sjs-functions-cvt
  '("basename"
    "basepath"
    "destinationUri"
    "partUri"
    "saveConvertedDocuments"))

(defconst company-marklogic-sjs-functions-dbg
  '("attach"
    "attached"
    "break"
    "breakpoints"
    "clear"
    "connect"
    "connected"
    "continue"
    "detach"
    "disconnect"
    "eval"
    "expr"
    "finish"
    "function"
    "invoke"
    "line"
    "next"
    "out"
    "stack"
    "status"
    "step"
    "stop"
    "stopped"
    "value"
    "wait"))

(defconst company-marklogic-sjs-functions-dbk
  '("convert"))

(defconst company-marklogic-sjs-functions-dls
  '("asOfQuery"
    "authorQuery"
    "breakCheckout"
    "documentAddCollections"
    "documentAddPermissions"
    "documentAddProperties"
    "documentCheckin"
    "documentCheckout"
    "documentCheckoutStatus"
    "documentCheckoutUpdateCheckin"
    "documentDelete"
    "documentExtractPart"
    "documentGetPermissions"
    "documentHistory"
    "documentIncludeQuery"
    "documentInsertAndManage"
    "documentIsManaged"
    "documentManage"
    "documentPurge"
    "documentRemoveCollections"
    "documentRemovePermissions"
    "documentRemoveProperties"
    "documentRetentionRules"
    "documentSetCollections"
    "documentSetPermissions"
    "documentSetProperties"
    "documentSetProperty"
    "documentSetQuality"
    "documentUnmanage"
    "documentUpdate"
    "documentVersion"
    "documentVersionAsOf"
    "documentVersionDelete"
    "documentVersionQuery"
    "documentVersionUri"
    "documentVersionUris"
    "documentVersionsQuery"
    "documentsQuery"
    "latestValidationResults"
    "linkExpand"
    "linkReferences"
    "nodeExpand"
    "purge"
    "retentionRule"
    "retentionRuleInsert"
    "retentionRuleRemove"
    "retentionRules"
    "setUpgradeStatus"
    "startUpgrade"
    "updateValidationResults"
    "validateAllDocuments"))

(defconst company-marklogic-sjs-functions-dom
  '("addPermissions"
    "addPipeline"
    "collection"
    "configurationCreate"
    "configurationGet"
    "configurationSetDefaultDomain"
    "configurationSetEvaluationContext"
    "configurationSetPermissions"
    "configurationSetRestartUser"
    "create"
    "domainScope"
    "domains"
    "evaluationContext"
    "get"
    "remove"
    "removePermissions"
    "removePipeline"
    "setDescription"
    "setDomainScope"
    "setEvaluationContext"
    "setName"
    "setPermissions"
    "setPipelines"))

(defconst company-marklogic-sjs-functions-ec2
  '("addSnapshotCreateVolumePermissionGroups"
    "addSnapshotCreateVolumePermissionUsers"
    "allocateAddress"
    "associateAddress"
    "attachVolume"
    "authorizeGroupIngress"
    "authorizeIcmpIngress"
    "authorizeTcpIngress"
    "authorizeUdpIngress"
    "createKeyPair"
    "createSecurityGroup"
    "createSnapshot"
    "createVolume"
    "createVolumeFromSnapshot"
    "deleteKeyPair"
    "deleteSecurityGroup"
    "deleteSnapshot"
    "deleteVolume"
    "describeAddresses"
    "describeAvailabilityZones"
    "describeImages"
    "describeInstanceBlockDeviceMapping"
    "describeInstanceDisableApiTermination"
    "describeInstanceInitiatedShutdownBehavior"
    "describeInstanceKernel"
    "describeInstanceRamdisk"
    "describeInstanceRootDeviceName"
    "describeInstanceType"
    "describeInstanceUserData"
    "describeInstances"
    "describeKeyPairs"
    "describeRegions"
    "describeSecurityGroups"
    "describeSnapshotCreateVolumePermission"
    "describeSnapshots"
    "describeVolumes"
    "detachVolume"
    "disassociateAddress"
    "getConsoleOutput"
    "modifyInstanceBlockDeviceMapping"
    "modifyInstanceDisableApiTermination"
    "modifyInstanceInitiatedShutdownBehavior"
    "modifyInstanceKernel"
    "modifyInstanceRamdisk"
    "modifyInstanceRootDeviceName"
    "modifyInstanceType"
    "modifyInstanceUserData"
    "monitorInstances"
    "rebootInstances"
    "releaseAddress"
    "removeSnapshotCreateVolumePermissionGroups"
    "removeSnapshotCreateVolumePermissionUsers"
    "resetInstanceKernel"
    "resetInstanceRamdisk"
    "resetSnapshotCreateVolumePermission"
    "revokeGroupIngress"
    "revokeIcmpIngress"
    "revokeTcpIngress"
    "revokeUdpIngress"
    "runInstances"
    "startInstances"
    "stopInstances"
    "terminateInstances"
    "unmonitorInstances"))

(defconst company-marklogic-sjs-functions-entity
  '("dictionaryInsert"
    "dictionaryLoad"
    "enrich"
    "extract"
    "skosDictionary"))

(defconst company-marklogic-sjs-functions-es
  '("addAttachments"
    "copyAttachments"
    "databasePropertiesGenerate"
    "extractArray"
    "extractionTemplateGenerate"
    "initInstance"
    "initSource"
    "initTranslationSource"
    "instanceConverterGenerate"
    "instanceFromDocument"
    "instanceGetAttachments"
    "instanceJsonFromDocument"
    "instanceXmlFromDocument"
    "modelFromXml"
    "modelGetTestInstances"
    "modelToXml"
    "modelValidate"
    "optional"
    "piiGenerate"
    "schemaGenerate"
    "searchOptionsGenerate"
    "serializeAttachments"
    "versionTranslatorGenerate"
    "withNamespace"))

(defconst company-marklogic-sjs-functions-excel
  '("clean"))

(defconst company-marklogic-sjs-functions-exsl
  '("nodeSet"
    "objectType"))

(defconst company-marklogic-sjs-functions-flexrep
  '("_binaryPushStatusUri"
    "ackApply"
    "ackBinaryChunkApply"
    "apply"
    "applyBinaryChunk"
    "applyBinaryGc"
    "applyBinaryJoin"
    "applyEncodedUpdates"
    "binaryChunkUris"
    "coalesceDomainStatuses"
    "configurationCreate"
    "configurationDelete"
    "configurationDomainIds"
    "configurationGet"
    "configurationGetAlertingUri"
    "configurationGetDomainName"
    "configurationGetId"
    "configurationInsert"
    "configurationSetAlertingUri"
    "configurationTarget"
    "configurationTargetGetDocumentsPerBatch"
    "configurationTargetGetEnabled"
    "configurationTargetGetExternalUser"
    "configurationTargetGetFilterModule"
    "configurationTargetGetFilterOptions"
    "configurationTargetGetHttpOptions"
    "configurationTargetGetId"
    "configurationTargetGetImmediatePush"
    "configurationTargetGetName"
    "configurationTargetGetReplicateCpf"
    "configurationTargetGetRetrySecondsMax"
    "configurationTargetGetRetrySecondsMin"
    "configurationTargetGetUrls"
    "configurationTargetGetUserId"
    "configurationTargetSetDocumentsPerBatch"
    "configurationTargetSetEnabled"
    "configurationTargetSetFilterModule"
    "configurationTargetSetFilterOptions"
    "configurationTargetSetHttpOptions"
    "configurationTargetSetImmediatePush"
    "configurationTargetSetName"
    "configurationTargetSetReplicateCpf"
    "configurationTargetSetRetrySecondsMax"
    "configurationTargetSetRetrySecondsMin"
    "configurationTargetSetUrls"
    "configurationTargetSetUserId"
    "configurationTargets"
    "configureDatabase"
    "createAppserver"
    "databaseNeedsConfiguration"
    "delete"
    "doPull"
    "documentReset"
    "documentStatus"
    "domainAlertingUri"
    "domainStatus"
    "domainTargetReset"
    "domainTargetStatuses"
    "getDomainName"
    "getTargetName"
    "getUpdateBinarydocUri"
    "inboundFilterCreate"
    "inboundFilterDelete"
    "inboundFilterGet"
    "inboundFilterInsert"
    "multipartEncode"
    "poll"
    "pollBinaryChunk"
    "process"
    "pullBinaries"
    "pullBinaryChunk"
    "pullCheckDuplicate"
    "pullCreate"
    "pullDelete"
    "pullGet"
    "pullGetAll"
    "pullGetById"
    "pullGetDomainId"
    "pullGetEnabled"
    "pullGetHttpOptions"
    "pullGetId"
    "pullGetName"
    "pullGetTargetId"
    "pullGetUrls"
    "pullInsert"
    "pullSetDomainId"
    "pullSetEnabled"
    "pullSetHttpOptions"
    "pullSetName"
    "pullSetTargetId"
    "pullSetUrls"
    "pushBinaries"
    "pushBinary"
    "pushBinaryChunk"
    "pushBinaryDocs"
    "pushForestBinaries"
    "pushLocalForest"
    "pushLocalForestTarget"
    "pushLocalForests"
    "remoteTargetStatus"
    "replicate"
    "targetBinaryPushStatusDocument"
    "targetBinaryPushStatusDocuments"
    "targetCreate"
    "targetDelete"
    "targetErrorDocuments"
    "targetStatus"
    "upgradeAppserver"
    "validateName"
    "validateUrl"))

(defconst company-marklogic-sjs-functions-fn
  '("QName"
    "abs"
    "adjustDateTimeToTimezone"
    "adjustDateToTimezone"
    "adjustTimeToTimezone"
    "analyzeString"
    "avg"
    "baseUri"
    "boolean"
    "ceiling"
    "codepointEqual"
    "codepointsToString"
    "collection"
    "compare"
    "concat"
    "contains"
    "count"
    "current"
    "currentDate"
    "currentDateTime"
    "currentGroup"
    "currentGroupingKey"
    "currentTime"
    "data"
    "dayFromDate"
    "dayFromDateTime"
    "daysFromDuration"
    "deepEqual"
    "defaultCollation"
    "distinctNodes"
    "distinctValues"
    "doc"
    "docAvailable"
    "document"
    "documentUri"
    "elementAvailable"
    "empty"
    "encodeForUri"
    "endsWith"
    "error"
    "escapeHtmlUri"
    "escapeUri"
    "exactlyOne"
    "exists"
    "expandedQName"
    "false"
    "filter"
    "floor"
    "foldLeft"
    "foldRight"
    "formatDate"
    "formatDateTime"
    "formatNumber"
    "formatTime"
    "functionArity"
    "functionAvailable"
    "functionLookup"
    "functionName"
    "generateId"
    "head"
    "hoursFromDateTime"
    "hoursFromDuration"
    "hoursFromTime"
    "id"
    "idref"
    "implicitTimezone"
    "inScopePrefixes"
    "indexOf"
    "insertBefore"
    "iriToUri"
    "key"
    "lang"
    "last"
    "localName"
    "localNameFromQName"
    "lowerCase"
    "map"
    "mapPairs"
    "matches"
    "max"
    "min"
    "minutesFromDateTime"
    "minutesFromDuration"
    "minutesFromTime"
    "monthFromDate"
    "monthFromDateTime"
    "monthsFromDuration"
    "name"
    "namespaceUri"
    "namespaceUriForPrefix"
    "namespaceUriFromQName"
    "nilled"
    "nodeKind"
    "nodeName"
    "normalizeSpace"
    "normalizeUnicode"
    "not"
    "number"
    "oneOrMore"
    "position"
    "prefixFromQName"
    "regexGroup"
    "remove"
    "replace"
    "resolveQName"
    "resolveUri"
    "reverse"
    "root"
    "round"
    "roundHalfToEven"
    "secondsFromDateTime"
    "secondsFromDuration"
    "secondsFromTime"
    "startsWith"
    "staticBaseUri"
    "string"
    "stringJoin"
    "stringLength"
    "stringPad"
    "stringToCodepoints"
    "subsequence"
    "substring"
    "substringAfter"
    "substringBefore"
    "subtractDateTimesYieldingDayTimeDuration"
    "subtractDateTimesYieldingYearMonthDuration"
    "sum"
    "systemProperty"
    "tail"
    "timezoneFromDate"
    "timezoneFromDateTime"
    "timezoneFromTime"
    "tokenize"
    "trace"
    "translate"
    "true"
    "typeAvailable"
    "unordered"
    "unparsedEntityPublicId"
    "unparsedEntityUri"
    "unparsedText"
    "unparsedTextAvailable"
    "upperCase"
    "yearFromDate"
    "yearFromDateTime"
    "yearsFromDuration"
    "zeroOrOne"))

(defconst company-marklogic-sjs-functions-geo
  '("approxCenter"
    "arcIntersection"
    "bearing"
    "boundingBoxes"
    "box"
    "boxIntersects"
    "circle"
    "circleIntersects"
    "circlePolygon"
    "complexPolygon"
    "complexPolygonContains"
    "complexPolygonIntersects"
    "coordinateSystemCanonical"
    "countDistinctVertices"
    "countVertices"
    "defaultCoordinateSystem"
    "destination"
    "distance"
    "distanceConvert"
    "ellipsePolygon"
    "geohashDecode"
    "geohashDecodePoint"
    "geohashEncode"
    "geohashNeighbors"
    "geohashPrecisionDimensions"
    "geohashSubhashes"
    "geospatialQuery"
    "geospatialQueryFromElements"
    "geospatialQueryFromNodes"
    "interiorPoint"
    "interiorPolygon"
    "linestring"
    "linestringConcat"
    "linestringReverse"
    "parse"
    "parseWkb"
    "parseWkt"
    "point"
    "polygon"
    "polygonContains"
    "polygonIntersects"
    "polygonToLinestring"
    "regionAffineTransform"
    "regionApproximate"
    "regionClean"
    "regionContains"
    "regionDe9im"
    "regionIntersects"
    "regionRelate"
    "removeDuplicateVertices"
    "shortestDistance"
    "toWkb"
    "toWkt"
    "validateWkb"
    "validateWkt"))

(defconst company-marklogic-sjs-functions-geogml
  '("box"
    "circle"
    "complexPolygon"
    "geospatialQuery"
    "geospatialQueryFromElements"
    "interiorPolygon"
    "linestring"
    "parseGml"
    "point"
    "polygon"
    "toGml"))

(defconst company-marklogic-sjs-functions-geojson
  '("box"
    "circle"
    "complexPolygon"
    "geospatialQuery"
    "geospatialQueryFromNodes"
    "interiorPolygon"
    "linestring"
    "multiLinestring"
    "multiPoint"
    "parseGeojson"
    "point"
    "polygon"
    "toGeojson"))

(defconst company-marklogic-sjs-functions-geokml
  '("box"
    "circle"
    "complexPolygon"
    "geospatialQuery"
    "geospatialQueryFromElements"
    "interiorPolygon"
    "linestring"
    "parseKml"
    "point"
    "polygon"
    "toKml"))

(defconst company-marklogic-sjs-functions-georss
  '("circle"
    "complexPolygon"
    "geospatialQuery"
    "linestring"
    "parseGeorss"
    "point"
    "polygon"
    "toGeorss"))

(defconst company-marklogic-sjs-functions-hadoop
  '("getSplits"))

(defconst company-marklogic-sjs-functions-info
  '("databaseCreate"
    "databaseDelete"
    "databaseGetFeature"
    "databaseSetFeature"
    "errorDetail"
    "flowCancel"
    "flowId"
    "flowPolicy"
    "flowStart"
    "flowTickets"
    "load"
    "policy"
    "policyDelete"
    "policyNames"
    "policySet"
    "ticket"
    "ticketDelete"
    "ticketErrors"
    "tickets"
    "unload"))

(defconst company-marklogic-sjs-functions-infodev
  '("checkOptions"
    "collectorOptions"
    "effectivePolicy"
    "fileFilter"
    "filesystemWalk"
    "getExternalBinaryFile"
    "getFile"
    "handleError"
    "ingest"
    "logProgress"
    "ticketAddAnnotation"
    "ticketCreate"
    "ticketGetStatus"
    "ticketSetStatus"
    "ticketSetTotalDocuments"
    "ticketSetTotalTransactions"
    "transaction"
    "transactionSize"))

(defconst company-marklogic-sjs-functions-json
  '("array"
    "arrayPop"
    "arrayPush"
    "arrayResize"
    "arraySetJavascriptByRef"
    "arraySize"
    "arrayValues"
    "arrayWith"
    "checkConfig"
    "config"
    "null"
    "object"
    "objectDefine"
    "setItemAt"
    "subarray"
    "toArray"
    "transformFromJson"
    "transformToJson"
    "transformToJsonObject"
    "transformToJsonXml"))

(defconst company-marklogic-sjs-functions-lnk
  '("create"
    "from"
    "get"
    "insert"
    "remove"
    "to"))

(defconst company-marklogic-sjs-functions-map
  '("clear"
    "contains"
    "count"
    "delete"
    "entry"
    "get"
    "keys"
    "map"
    "new"
    "put"
    "setJavascriptByRef"
    "with"))

(defconst company-marklogic-sjs-functions-math
  '("acos"
    "asin"
    "atan"
    "atan2"
    "ceil"
    "correlation"
    "cos"
    "cosh"
    "cot"
    "covariance"
    "covarianceP"
    "degrees"
    "exp"
    "fabs"
    "floor"
    "fmod"
    "frexp"
    "ldexp"
    "linearModel"
    "linearModelCoeff"
    "linearModelIntercept"
    "linearModelRsquared"
    "log"
    "log10"
    "median"
    "mode"
    "modf"
    "percentRank"
    "percentile"
    "pi"
    "pow"
    "radians"
    "rank"
    "sin"
    "sinh"
    "sqrt"
    "stddev"
    "stddevP"
    "tan"
    "tanh"
    "trunc"
    "variance"
    "varianceP"))

(defconst company-marklogic-sjs-functions-mcgm
  '("circle"
    "geospatialQuery"
    "geospatialQueryFromElements"
    "point"
    "polygon"))

(defconst company-marklogic-sjs-functions-msword
  '("clean"))

(defconst company-marklogic-sjs-functions-ooxml
  '("packageParts"
    "packagePartsInsert"
    "packageUris"
    "runsMerge"))

(defconst company-marklogic-sjs-functions-op
  '("add"
    "and"
    "arrayAggregate"
    "as"
    "asc"
    "avg"
    "call"
    "case"
    "col"
    "count"
    "desc"
    "divide"
    "eq"
    "except"
    "explain"
    "export"
    "fragmentIdCol"
    "fromLexicons"
    "fromLiterals"
    "fromSparql"
    "fromSql"
    "fromTriples"
    "fromView"
    "ge"
    "graphCol"
    "groupBy"
    "groupConcat"
    "gt"
    "import"
    "intersect"
    "isDefined"
    "joinCrossProduct"
    "joinDoc"
    "joinDocUri"
    "joinInner"
    "joinLeftOuter"
    "jsonArray"
    "jsonBoolean"
    "jsonDocument"
    "jsonNull"
    "jsonNumber"
    "jsonObject"
    "jsonString"
    "le"
    "limit"
    "lt"
    "map"
    "max"
    "min"
    "modulo"
    "multiply"
    "ne"
    "not"
    "offset"
    "offsetLimit"
    "on"
    "or"
    "orderBy"
    "param"
    "pattern"
    "prefixer"
    "prepare"
    "prop"
    "reduce"
    "result"
    "sample"
    "schemaCol"
    "select"
    "sequenceAggregate"
    "sqlCondition"
    "subtract"
    "sum"
    "toSource"
    "uda"
    "union"
    "viewCol"
    "when"
    "where"
    "whereDistinct"
    "xmlAttribute"
    "xmlComment"
    "xmlDocument"
    "xmlElement"
    "xmlPi"
    "xmlText"
    "xpath"))

(defconst company-marklogic-sjs-functions-p
  '("action"
    "collection"
    "condition"
    "create"
    "execute"
    "get"
    "getById"
    "insert"
    "pipelines"
    "remove"
    "stateTransition"
    "statusTransition"))

(defconst company-marklogic-sjs-functions-pdf
  '("clean"
    "getToc"
    "insertTocHeaders"
    "makeToc"))

(defconst company-marklogic-sjs-functions-pkg
  '("create"
    "databaseConfiguration"
    "delete"
    "differences"
    "errors"
    "exists"
    "getDatabase"
    "getDatabaseList"
    "getModules"
    "getPackage"
    "getPackageList"
    "getServer"
    "getServerList"
    "install"
    "installable"
    "putDatabase"
    "putModules"
    "putServer"
    "removeDatabase"
    "removeModules"
    "removeServer"
    "revert"
    "serverConfiguration"
    "valid"))

(defconst company-marklogic-sjs-functions-pki
  '("authorityCreateClientCertificate"
    "authorityCreateHostCertificate"
    "authoritySignHostCertificateRequest"
    "createAuthority"
    "createTemplate"
    "deleteAuthority"
    "deleteCertificate"
    "deleteTemplate"
    "generateCertificateRequest"
    "generateTemplateCertificateAuthority"
    "generateTemporaryCertificate"
    "generateTemporaryCertificateIfNecessary"
    "getCertificate"
    "getCertificatePem"
    "getCertificateXml"
    "getCertificates"
    "getCertificatesForTemplate"
    "getCertificatesForTemplateXml"
    "getPendingCertificateRequest"
    "getPendingCertificateRequestsPem"
    "getPendingCertificateRequestsXml"
    "getTemplate"
    "getTemplateByName"
    "getTemplateCertificateAuthority"
    "getTemplateIds"
    "getTrustedCertificateIds"
    "insertCertificateRevocationList"
    "insertHostCertificate"
    "insertSignedCertificates"
    "insertTemplate"
    "insertTrustedCertificates"
    "isTemporary"
    "needCertificate"
    "templateGetDescription"
    "templateGetId"
    "templateGetKeyOptions"
    "templateGetKeyType"
    "templateGetName"
    "templateGetRequest"
    "templateGetVersion"
    "templateInUse"
    "templateSetDescription"
    "templateSetKeyOptions"
    "templateSetKeyType"
    "templateSetName"
    "templateSetRequest"))

(defconst company-marklogic-sjs-functions-plugin
  '("asset"
    "assetExists"
    "capability"
    "enumerate"
    "flushScope"
    "implementations"
    "initializeScope"
    "installFromFilesystem"
    "installFromZip"
    "plugins"
    "register"
    "uninstall"))

(defconst company-marklogic-sjs-functions-ppt
  '("clean"))

(defconst company-marklogic-sjs-functions-prof
  '("allowed"
    "disable"
    "enable"
    "eval"
    "invoke"
    "report"
    "reset"
    "value"
    "xsltEval"
    "xsltInvoke"))

(defconst company-marklogic-sjs-functions-rdf
  '("langString"
    "langStringLanguage"))

(defconst company-marklogic-sjs-functions-rdt
  '("redact"
    "ruleValidate"))

(defconst company-marklogic-sjs-functions-rest
  '("checkOptions"
    "checkRequest"
    "getRawQueryParams"
    "matchingRequest"
    "processRequest"
    "reportError"
    "rewrite"))

(defconst company-marklogic-sjs-functions-sc
  '("annotations"
    "attributeDecl"
    "attributes"
    "canonicalPath"
    "complexType"
    "componentProperty"
    "elementDecl"
    "facets"
    "functionParameterType"
    "functionReturnType"
    "name"
    "particles"
    "schema"
    "schemaFromPath"
    "simpleType"
    "type"
    "typeApply"
    "typeNamed"))

(defconst company-marklogic-sjs-functions-schematron
  '("compile"
    "delete"
    "get"
    "put"
    "validate"))

(defconst company-marklogic-sjs-functions-search
  '("checkOptions"
    "estimate"
    "getDefaultOptions"
    "parse"
    "removeConstraint"
    "resolve"
    "resolveNodes"
    "search"
    "snippet"
    "suggest"
    "unparse"
    "values"))

(defconst company-marklogic-sjs-functions-sec
  '("addQueryRolesets"
    "ampAddRoles"
    "ampDocCollections"
    "ampDocPermissions"
    "ampExists"
    "ampGetRoles"
    "ampRemoveRoles"
    "ampSetRoles"
    "ampsChangeModulesDatabase"
    "ampsCollection"
    "checkAdmin"
    "collectionAddPermissions"
    "collectionGetPermissions"
    "collectionRemovePermissions"
    "collectionSetPermissions"
    "collectionsCollection"
    "compartmentGetRoles"
    "createAmp"
    "createCredential"
    "createExternalSecurity"
    "createPrivilege"
    "createRole"
    "createUser"
    "createUserWithRole"
    "credentialGetCertificate"
    "credentialGetDescription"
    "credentialGetId"
    "credentialGetPassword"
    "credentialGetPermissions"
    "credentialGetPrivateKey"
    "credentialGetSigning"
    "credentialGetTargets"
    "credentialGetUsername"
    "credentialSetCertificate"
    "credentialSetDescription"
    "credentialSetName"
    "credentialSetPassword"
    "credentialSetPermissions"
    "credentialSetSigning"
    "credentialSetTargets"
    "credentialSetUsername"
    "credentialsGetAws"
    "credentialsGetAzure"
    "credentialsSetAws"
    "credentialsSetAzure"
    "externalSecurityClearCache"
    "externalSecurityGetAuthentication"
    "externalSecurityGetAuthorization"
    "externalSecurityGetCacheTimeout"
    "externalSecurityGetDescription"
    "externalSecurityGetHttpOptions"
    "externalSecurityGetLdapAttribute"
    "externalSecurityGetLdapBase"
    "externalSecurityGetLdapBindMethod"
    "externalSecurityGetLdapCertificate"
    "externalSecurityGetLdapDefaultUser"
    "externalSecurityGetLdapMemberAttribute"
    "externalSecurityGetLdapMemberofAttribute"
    "externalSecurityGetLdapNestedLookup"
    "externalSecurityGetLdapPrivateKey"
    "externalSecurityGetLdapServerUri"
    "externalSecurityGetLdapStartTls"
    "externalSecurityGetSamlAttributeNames"
    "externalSecurityGetSamlEntityId"
    "externalSecurityGetSamlPrivilegeAttributeName"
    "externalSecurityGetSslClientCertificateAuthorities"
    "externalSecurityGetSslRequireClientCertificate"
    "externalSecuritySetAuthentication"
    "externalSecuritySetAuthorization"
    "externalSecuritySetCacheTimeout"
    "externalSecuritySetDescription"
    "externalSecuritySetHttpOptions"
    "externalSecuritySetLdapAttribute"
    "externalSecuritySetLdapBase"
    "externalSecuritySetLdapBindMethod"
    "externalSecuritySetLdapCertificate"
    "externalSecuritySetLdapDefaultUser"
    "externalSecuritySetLdapMemberAttribute"
    "externalSecuritySetLdapMemberofAttribute"
    "externalSecuritySetLdapNestedLookup"
    "externalSecuritySetLdapPassword"
    "externalSecuritySetLdapServerUri"
    "externalSecuritySetLdapStartTls"
    "externalSecuritySetName"
    "externalSecuritySetSamlAttributeNames"
    "externalSecuritySetSamlEntityId"
    "externalSecuritySetSamlPrivilegeAttributeName"
    "externalSecuritySetSslClientCertificateAuthorities"
    "externalSecuritySetSslRequireClientCertificate"
    "getAmp"
    "getCollection"
    "getCompartments"
    "getCredential"
    "getCredentialById"
    "getCredentialIds"
    "getCredentialNames"
    "getDistinctPermissions"
    "getPrivilege"
    "getRoleIds"
    "getRoleNames"
    "getSamlEntity"
    "getSamlEntityIds"
    "getUserNames"
    "ldapServer"
    "pathAddPermissions"
    "pathGetPermissions"
    "pathRemovePermissions"
    "pathSetPermissions"
    "privDocCollections"
    "privDocPermissions"
    "privilegeAddRoles"
    "privilegeExists"
    "privilegeGetRoles"
    "privilegeRemoveRoles"
    "privilegeSetName"
    "privilegeSetRoles"
    "privilegesCollection"
    "protectCollection"
    "protectPath"
    "protectedPathDocCollections"
    "protectedPathDocPermissions"
    "protectedPathsCollection"
    "queryRoleset"
    "queryRolesetToString"
    "queryRolesets"
    "queryRolesetsCollection"
    "queryRolesetsDocCollections"
    "queryRolesetsDocPermissions"
    "queryRolesetsId"
    "queryRolesetsToString"
    "removeAmp"
    "removeCredential"
    "removeCredentialById"
    "removeExternalSecurity"
    "removePath"
    "removePrivilege"
    "removeQueryRolesets"
    "removeRole"
    "removeRoleFromAmps"
    "removeRoleFromPrivileges"
    "removeRoleFromRoles"
    "removeRoleFromUsers"
    "removeUser"
    "resecureCredentials"
    "roleAddRoles"
    "roleDocCollections"
    "roleDocPermissions"
    "roleExists"
    "roleGetCompartment"
    "roleGetDefaultCollections"
    "roleGetDefaultPermissions"
    "roleGetDescription"
    "roleGetExternalNames"
    "roleGetRoles"
    "rolePrivileges"
    "roleRemoveRoles"
    "roleSetDefaultCollections"
    "roleSetDefaultPermissions"
    "roleSetDescription"
    "roleSetExternalNames"
    "roleSetName"
    "roleSetRoles"
    "rolesCollection"
    "samlEntityDelete"
    "samlEntityInsert"
    "samlServer"
    "securityCollection"
    "securityInstalled"
    "securityNamespace"
    "securityPathNamespace"
    "securityVersion"
    "setRealm"
    "uidForName"
    "unprotectCollection"
    "unprotectPath"
    "uriCredentialTarget"
    "userAddRoles"
    "userDocCollections"
    "userDocPermissions"
    "userExists"
    "userGetDefaultCollections"
    "userGetDefaultPermissions"
    "userGetDescription"
    "userGetExternalNames"
    "userGetLastPasswordDate"
    "userGetPasswordExtra"
    "userGetRoles"
    "userPrivileges"
    "userRemoveRoles"
    "userSetDefaultCollections"
    "userSetDefaultPermissions"
    "userSetDescription"
    "userSetExternalNames"
    "userSetName"
    "userSetPassword"
    "userSetPasswordExtra"
    "userSetRoles"
    "usersCollection"
    "validatePermissions"))

(defconst company-marklogic-sjs-functions-sem
  '(""
    "binding"
    "bnode"
    "coalesce"
    "curieExpand"
    "curieShorten"
    "databaseNodes"
    "datatype"
    "defaultGraphIri"
    "describe"
    "graph"
    "graphAddPermissions"
    "graphDelete"
    "graphGetPermissions"
    "graphInsert"
    "graphRemovePermissions"
    "graphSetPermissions"
    "if"
    "inMemoryStore"
    "invalid"
    "invalidDatatype"
    "iri"
    "isBlank"
    "isIRI"
    "isLiteral"
    "isNumeric"
    "lang"
    "langMatches"
    "prefixes"
    "queryResultsSerialize"
    "random"
    "rdfBuilder"
    "rdfGet"
    "rdfInsert"
    "rdfLoad"
    "rdfParse"
    "rdfSerialize"
    "resolveIri"
    "rulesetStore"
    "sameTerm"
    "sparql"
    "sparqlPlan"
    "sparqlUpdate"
    "sparqlValues"
    "store"
    "timezoneString"
    "transitiveClosure"
    "triple"
    "tripleGraph"
    "tripleObject"
    "triplePredicate"
    "tripleSubject"
    "typedLiteral"
    "unknown"
    "unknownDatatype"
    "uuid"
    "uuidString"))

(defconst company-marklogic-sjs-functions-spell
  '("addWord"
    "doubleMetaphone"
    "insert"
    "isCorrect"
    "levenshteinDistance"
    "load"
    "makeDictionary"
    "removeWord"
    "romanize"
    "suggest"
    "suggestDetailed"))

(defconst company-marklogic-sjs-functions-sql
  '("bitLength"
    "collatedString"
    "collatedStringCollation"
    "columnID"
    "dateadd"
    "datediff"
    "datepart"
    "day"
    "dayname"
    "difference"
    "glob"
    "hours"
    "ifnull"
    "insert"
    "instr"
    "left"
    "like"
    "ltrim"
    "minutes"
    "month"
    "monthname"
    "nullif"
    "octetLength"
    "quarter"
    "rand"
    "repeat"
    "right"
    "rtrim"
    "seconds"
    "sign"
    "soundex"
    "space"
    "strpos"
    "timestampadd"
    "timestampdiff"
    "trim"
    "week"
    "year"
    "yearday"))

(defconst company-marklogic-sjs-functions-tde
  '("getView"
    "nodeDataExtract"
    "templateInsert"
    "validate"))

(defconst company-marklogic-sjs-functions-temporal
  '(""
    "advanceLsqt"
    "axes"
    "axisCreate"
    "axisGetEnd"
    "axisGetStart"
    "axisRemove"
    "collectionCreate"
    "collectionGetAxis"
    "collectionGetOptions"
    "collectionRemove"
    "collectionSetOptions"
    "collections"
    "documentDelete"
    "documentInsert"
    "documentLoad"
    "documentPeriod"
    "documentProtect"
    "documentWipe"
    "getLsqt"
    "getLsqtAutomation"
    "getLsqtAutomationLag"
    "getLsqtAutomationPeriod"
    "getUseLsqt"
    "nodeDelete"
    "nodeInsertAfter"
    "nodeInsertBefore"
    "nodeInsertChild"
    "nodeReplace"
    "setLsqtAutomation"
    "setUseLsqt"
    "statementGetSystemTime"
    "statementSetDocumentVersionUri"
    "statementSetSystemTime"))

(defconst company-marklogic-sjs-functions-thsr
  '("addSynonym"
    "expand"
    "insert"
    "load"
    "lookup"
    "queryLookup"
    "removeEntry"
    "removeSynonym"
    "removeTerm"
    "setEntry"))

(defconst company-marklogic-sjs-functions-tieredstorage
  '("databaseCreateSubDatabase"
    "databaseCreateSuperDatabase"
    "databaseDeleteSubDatabase"
    "databaseDeleteSuperDatabase"
    "databasePartitionNumbers"
    "databasePartitions"
    "forestCombine"
    "forestMigrate"
    "partitionDelete"
    "partitionDeleteQuery"
    "partitionForests"
    "partitionGetExclusionEnabled"
    "partitionGetQuery"
    "partitionMigrate"
    "partitionNumberForests"
    "partitionQueries"
    "partitionResize"
    "partitionSetAvailability"
    "partitionSetExclusionEnabled"
    "partitionSetQuery"
    "partitionSetUpdatesAllowed"
    "partitionTransfer"
    "queryPartitionCreate"
    "rangePartitionCreate"))

(defconst company-marklogic-sjs-functions-trgr
  '("anyCustomPropertyContent"
    "anyPropertyContent"
    "collectionScope"
    "createTrigger"
    "directoryScope"
    "documentContent"
    "documentScope"
    "getTrigger"
    "getTriggerById"
    "getUniqueTriggerId"
    "postCommit"
    "preCommit"
    "propertyContent"
    "removeTrigger"
    "triggerAddPermissions"
    "triggerDataEvent"
    "triggerDatabaseOnlineEvent"
    "triggerDisable"
    "triggerEnable"
    "triggerGetPermissions"
    "triggerModule"
    "triggerRemovePermissions"
    "triggerSetDescription"
    "triggerSetEvent"
    "triggerSetModule"
    "triggerSetName"
    "triggerSetPermissions"
    "triggerSetRecursive"
    "triggerSetTaskPriority"
    "triggersChangeModulesDatabase"
    "triggersCollection"
    "triggersNamespace"
    "triggersUri"
    "validateContent"
    "validateDataEvent"
    "validateDatabaseOnlineEvent"
    "validateModule"
    "validateScope"
    "validateTriggerName"
    "validateWhen"))

(defconst company-marklogic-sjs-functions-view
  '("addColumn"
    "addField"
    "addPermissions"
    "collection"
    "collectionViewScope"
    "column"
    "columns"
    "create"
    "elementViewScope"
    "field"
    "fields"
    "get"
    "getBindings"
    "getById"
    "getColumn"
    "getField"
    "getOrdered"
    "getPermissions"
    "getViewScope"
    "remove"
    "removeById"
    "removeColumn"
    "removeField"
    "removePermissions"
    "schemaAddPermissions"
    "schemaCreate"
    "schemaGet"
    "schemaGetPermissions"
    "schemaRemove"
    "schemaRemovePermissions"
    "schemaSetPermissions"
    "schemas"
    "setColumns"
    "setFields"
    "setName"
    "setOrdered"
    "setPermissions"
    "setViewScope"
    "views"))

(defconst company-marklogic-sjs-functions-xdmp
  '("QNameFromKey"
    "access"
    "add64"
    "addResponseHeader"
    "amp"
    "ampRoles"
    "and64"
    "annotation"
    "apply"
    "architecture"
    "arrayValues"
    "atomizable"
    "awsRegion"
    "awsServicesDomain"
    "awsServicesPartition"
    "base64Decode"
    "base64Encode"
    "binaryDecode"
    "binaryIsExternal"
    "binaryIsLarge"
    "binaryIsSmall"
    "binarySize"
    "binaryToInteger"
    "bootstrapHosts"
    "cacheStatus"
    "callerDialect"
    "canGrantRoles"
    "castableAs"
    "cluster"
    "clusterEffectiveVersion"
    "clusterName"
    "clusterVersionAtLeast"
    "collationCanonicalUri"
    "collectionDelete"
    "collectionId"
    "collectionLocks"
    "collectionProperties"
    "collections"
    "commit"
    "configurationTimestamp"
    "credential"
    "credentialId"
    "credentials"
    "crypt"
    "crypt2"
    "currentLast"
    "currentPosition"
    "database"
    "databaseAssignmentPolicy"
    "databaseBackup"
    "databaseBackupCancel"
    "databaseBackupPurge"
    "databaseBackupStatus"
    "databaseBackupValidate"
    "databaseDirectoryCreation"
    "databaseEncryptionAtRest"
    "databaseEncryptionKeyId"
    "databaseForests"
    "databaseGlobalNonblockingTimestamp"
    "databaseIncrementalBackup"
    "databaseIncrementalBackupValidate"
    "databaseIsForestRetired"
    "databaseIsRebalancerEnable"
    "databaseIsReplica"
    "databaseJournalArchivePurge"
    "databaseName"
    "databaseNodeQueryRolesets"
    "databaseNonblockingTimestamp"
    "databasePathNamespaces"
    "databaseRestore"
    "databaseRestoreCancel"
    "databaseRestoreStatus"
    "databaseRestoreValidate"
    "databases"
    "daynameFromDate"
    "decodeFromNCName"
    "defaultCollections"
    "defaultPermissions"
    "describe"
    "diacriticLess"
    "directory"
    "directoryCreate"
    "directoryDelete"
    "directoryLocks"
    "directoryProperties"
    "documentAddCollections"
    "documentAddPermissions"
    "documentAddProperties"
    "documentAssign"
    "documentDelete"
    "documentFilter"
    "documentForest"
    "documentGet"
    "documentGetCollections"
    "documentGetMetadata"
    "documentGetMetadataValue"
    "documentGetPermissions"
    "documentGetProperties"
    "documentGetQuality"
    "documentInsert"
    "documentLoad"
    "documentLocks"
    "documentPartitionAssign"
    "documentProperties"
    "documentPutMetadata"
    "documentRemoveCollections"
    "documentRemoveMetadata"
    "documentRemovePermissions"
    "documentRemoveProperties"
    "documentSetCollections"
    "documentSetMetadata"
    "documentSetPermissions"
    "documentSetProperties"
    "documentSetProperty"
    "documentSetQuality"
    "documentTimestamp"
    "eager"
    "effectiveVersion"
    "elapsedTime"
    "elementContentType"
    "email"
    "encodeForNCName"
    "encodingLanguageDetect"
    "estimate"
    "eval"
    "evalIn"
    "excelConvert"
    "exists"
    "externalBinary"
    "externalBinaryPath"
    "externalSecurity"
    "filesystemDirectory"
    "filesystemDirectoryCreate"
    "filesystemDirectoryDelete"
    "filesystemFile"
    "filesystemFileEncryptionStatus"
    "filesystemFileExists"
    "filesystemFileGetTime"
    "filesystemFileLength"
    "filesystemFileSetTime"
    "filesystemFilepath"
    "foreignClusterStatus"
    "foreignClusters"
    "forest"
    "forestBackup"
    "forestBackupStatus"
    "forestClear"
    "forestCounts"
    "forestDatabaseReplicationResume"
    "forestDatabaseReplicationSuspend"
    "forestDatabases"
    "forestFailoverInfo"
    "forestHost"
    "forestName"
    "forestOnline"
    "forestOpenReplica"
    "forestRestart"
    "forestRestore"
    "forestRollback"
    "forestState"
    "forestStatus"
    "forestUpdatesAllowed"
    "forestValidateReplicaIndex"
    "forests"
    "formatNumber"
    "fromJSON"
    "fromJson"
    "fromJsonString"
    "function"
    "functionModule"
    "functionName"
    "functionParameterName"
    "functionParameterType"
    "functionReturnType"
    "functionSignature"
    "functions"
    "get"
    "getCurrentRoles"
    "getCurrentUser"
    "getCurrentUserid"
    "getInvokedPath"
    "getOriginalUrl"
    "getOrphanedBinaries"
    "getRequestBody"
    "getRequestClientAddress"
    "getRequestClientCertificate"
    "getRequestErrorFormat"
    "getRequestField"
    "getRequestFieldContentType"
    "getRequestFieldFilename"
    "getRequestFieldNames"
    "getRequestHeader"
    "getRequestHeaderNames"
    "getRequestMethod"
    "getRequestPath"
    "getRequestPort"
    "getRequestProtocol"
    "getRequestUrl"
    "getRequestUser"
    "getRequestUsername"
    "getResponseCode"
    "getResponseEncoding"
    "getServerField"
    "getServerFieldNames"
    "getSessionField"
    "getSessionFieldNames"
    "getTransactionMode"
    "getUrlRewriterPath"
    "group"
    "groupGetAuditEventTypeEnabled"
    "groupHosts"
    "groupName"
    "groupPortServers"
    "groupServers"
    "groupTaskServer"
    "groups"
    "gssServerNegotiate"
    "gunzip"
    "gzip"
    "hasPrivilege"
    "hash32"
    "hash64"
    "hexToInteger"
    "hmacMd5"
    "hmacSha1"
    "hmacSha256"
    "hmacSha512"
    "host"
    "hostForests"
    "hostGetSslFipsEnabled"
    "hostGroup"
    "hostMode"
    "hostModeDescription"
    "hostName"
    "hostStatus"
    "hosts"
    "httpDelete"
    "httpGet"
    "httpHead"
    "httpOptions"
    "httpPost"
    "httpPut"
    "initcap"
    "integerToBinary"
    "integerToHex"
    "integerToOctal"
    "invoke"
    "invokeFunction"
    "invokeIn"
    "isWhitespaceNode"
    "javascriptEval"
    "jsonValidate"
    "jsonValidateNode"
    "keyFromQName"
    "keystoreExport"
    "keystoreImport"
    "keystoreSetCurrentHost"
    "keystoreSynchronize"
    "keystoreValidateExported"
    "lazy"
    "ldapLookup"
    "ldapSearch"
    "load"
    "lockAcquire"
    "lockForUpdate"
    "lockRelease"
    "log"
    "logLevel"
    "login"
    "logout"
    "lshift64"
    "md5"
    "merge"
    "mergeCancel"
    "merging"
    "mimetypes"
    "modulesDatabase"
    "modulesRoot"
    "monthNameFromDate"
    "mul64"
    "multipartDecode"
    "multipartEncode"
    "nodeCollections"
    "nodeDatabase"
    "nodeDelete"
    "nodeInsertAfter"
    "nodeInsertBefore"
    "nodeInsertChild"
    "nodeKind"
    "nodeMetadata"
    "nodeMetadataValue"
    "nodePermissions"
    "nodeQueryRolesets"
    "nodeReplace"
    "nodeUri"
    "not64"
    "octalToInteger"
    "or64"
    "parseDateTime"
    "parseYymmdd"
    "partitionForests"
    "passiveHasPrivilege"
    "passiveSecurityAssert"
    "path"
    "pdfConvert"
    "permission"
    "plan"
    "plannable"
    "platform"
    "position"
    "powerpointConvert"
    "prettyPrint"
    "privilege"
    "privilegeKind"
    "privilegeName"
    "privilegeRoles"
    "privileges"
    "productEdition"
    "productEnvironment"
    "quarterFromDate"
    "queryMeters"
    "queryPartitions"
    "queryTrace"
    "quote"
    "random"
    "rangePartitionForests"
    "redirectResponse"
    "removeOrphanedBinary"
    "request"
    "requestCancel"
    "requestLogDelete"
    "requestLogGet"
    "requestLogPut"
    "requestStatus"
    "requestTimestamp"
    "resolveUri"
    "restart"
    "rethrow"
    "role"
    "roleCompartment"
    "roleDescription"
    "roleGetDefaultCollections"
    "roleGetDefaultPermissions"
    "roleName"
    "rolePrivileges"
    "roleRoles"
    "roles"
    "rollback"
    "rsaGenerate"
    "rshift64"
    "save"
    "schemaDatabase"
    "securityAssert"
    "securityDatabase"
    "server"
    "serverCollation"
    "serverCoordinateSystem"
    "serverDatabase"
    "serverDefaultXqueryVersion"
    "serverGroup"
    "serverKind"
    "serverModulesDatabase"
    "serverName"
    "serverPort"
    "serverRoot"
    "serverSslCertificateTemplate"
    "serverStatus"
    "servers"
    "set"
    "setRequestLimit"
    "setRequestTimeLimit"
    "setResponseCode"
    "setResponseContentType"
    "setResponseEncoding"
    "setResponseOutputMethod"
    "setServerField"
    "setServerFieldPrivilege"
    "setSessionField"
    "setTransactionMode"
    "setTransactionName"
    "setTransactionTimeLimit"
    "sha1"
    "sha256"
    "sha384"
    "sha512"
    "shutdown"
    "sleep"
    "softwareVersion"
    "spawn"
    "spawnFunction"
    "spawnIn"
    "sql"
    "sqlPlan"
    "startJournalArchiving"
    "step64"
    "stopJournalArchiving"
    "strftime"
    "subbinary"
    "tidy"
    "timestampToWallclock"
    "toJson"
    "toJsonString"
    "trace"
    "traceEnabled"
    "transaction"
    "transactionCommit"
    "transactionLocks"
    "transactionRollback"
    "triggersDatabase"
    "type"
    "unpath"
    "unquote"
    "uriContentType"
    "uriFormat"
    "uriIsFile"
    "urlDecode"
    "urlEncode"
    "user"
    "userExternalSecurity"
    "userGetDefaultCollections"
    "userGetDefaultPermissions"
    "userLastLogin"
    "userPrivileges"
    "userRoles"
    "useridRoles"
    "validate"
    "value"
    "version"
    "wallclockToTimestamp"
    "weekFromDate"
    "weekdayFromDate"
    "withNamespaces"
    "wordConvert"
    "x509CertificateExtract"
    "x509CertificateGenerate"
    "x509CertificateIssuerName"
    "x509CertificateSubjectName"
    "xaComplete"
    "xaForget"
    "xor64"
    "xqueryEval"
    "xqueryVersion"
    "xsltEval"
    "xsltInvoke"
    "yeardayFromDate"
    "zipCreate"
    "zipGet"
    "zipManifest"))

(defconst company-marklogic-sjs-functions-xhtml
  '("addLists"
    "clean"
    "restructure"))

(defconst company-marklogic-sjs-functions-xinc
  '("linkExpand"
    "linkReferences"
    "nodeExpand"))

(defconst company-marklogic-sjs-functions-xp
  '("altPathFromElementScheme"
    "dereference"
    "doDereference"
    "parseXpointer"
    "pathFromElementScheme"))

(defconst company-marklogic-sjs-functions-xs
  '("ENTITIES"
    "ENTITY"
    "ID"
    "IDREF"
    "IDREFS"
    "NCName"
    "NMTOKEN"
    "NMTOKENS"
    "NOTATION"
    "Name"
    "QName"
    "anyAtomicType"
    "anySimpleType"
    "anyURI"
    "base64Binary"
    "boolean"
    "byte"
    "date"
    "dateTime"
    "dateTimeStamp"
    "dayTimeDuration"
    "decimal"
    "double"
    "duration"
    "float"
    "gDay"
    "gMonth"
    "gMonthDay"
    "gYear"
    "gYearMonth"
    "hexBinary"
    "int"
    "integer"
    "language"
    "long"
    "negativeInteger"
    "nonNegativeInteger"
    "nonPositiveInteger"
    "normalizedString"
    "positiveInteger"
    "short"
    "string"
    "time"
    "token"
    "unsignedByte"
    "unsignedInt"
    "unsignedLong"
    "unsignedShort"
    "yearMonthDuration"))

(defconst company-marklogic-sjs-functions
  (cl-labels ((addp (prefix names)
                (mapcar (lambda (n) (concat prefix "." n)) names)))
  `((admin . ,(addp "admin" company-marklogic-sjs-functions-admin))
    (alert . ,(addp "alert" company-marklogic-sjs-functions-alert))
    (cdict . ,(addp "cdict" company-marklogic-sjs-functions-cdict))
    (clang . ,(addp "clang" company-marklogic-sjs-functions-clang))
    (cma . ,(addp "cma" company-marklogic-sjs-functions-cma))
    (cpf . ,(addp "cpf" company-marklogic-sjs-functions-cpf))
    (css . ,(addp "css" company-marklogic-sjs-functions-css))
    (cts . ,(addp "cts" company-marklogic-sjs-functions-cts))
    (cvt . ,(addp "cvt" company-marklogic-sjs-functions-cvt))
    (dbg . ,(addp "dbg" company-marklogic-sjs-functions-dbg))
    (dbk . ,(addp "dbk" company-marklogic-sjs-functions-dbk))
    (dls . ,(addp "dls" company-marklogic-sjs-functions-dls))
    (dom . ,(addp "dom" company-marklogic-sjs-functions-dom))
    (ec2 . ,(addp "ec2" company-marklogic-sjs-functions-ec2))
    (entity . ,(addp "entity" company-marklogic-sjs-functions-entity))
    (es . ,(addp "es" company-marklogic-sjs-functions-es))
    (excel . ,(addp "excel" company-marklogic-sjs-functions-excel))
    (exsl . ,(addp "exsl" company-marklogic-sjs-functions-exsl))
    (flexrep . ,(addp "flexrep" company-marklogic-sjs-functions-flexrep))
    (fn . ,(addp "fn" company-marklogic-sjs-functions-fn))
    (geo . ,(addp "geo" company-marklogic-sjs-functions-geo))
    (geogml . ,(addp "geogml" company-marklogic-sjs-functions-geogml))
    (geojson . ,(addp "geojson" company-marklogic-sjs-functions-geojson))
    (geokml . ,(addp "geokml" company-marklogic-sjs-functions-geokml))
    (georss . ,(addp "georss" company-marklogic-sjs-functions-georss))
    (hadoop . ,(addp "hadoop" company-marklogic-sjs-functions-hadoop))
    (info . ,(addp "info" company-marklogic-sjs-functions-info))
    (infodev . ,(addp "infodev" company-marklogic-sjs-functions-infodev))
    (json . ,(addp "json" company-marklogic-sjs-functions-json))
    (lnk . ,(addp "lnk" company-marklogic-sjs-functions-lnk))
    (map . ,(addp "map" company-marklogic-sjs-functions-map))
    (math . ,(addp "math" company-marklogic-sjs-functions-math))
    (mcgm . ,(addp "mcgm" company-marklogic-sjs-functions-mcgm))
    (msword . ,(addp "msword" company-marklogic-sjs-functions-msword))
    (ooxml . ,(addp "ooxml" company-marklogic-sjs-functions-ooxml))
    (op . ,(addp "op" company-marklogic-sjs-functions-op))
    (p . ,(addp "p" company-marklogic-sjs-functions-p))
    (pdf . ,(addp "pdf" company-marklogic-sjs-functions-pdf))
    (pkg . ,(addp "pkg" company-marklogic-sjs-functions-pkg))
    (pki . ,(addp "pki" company-marklogic-sjs-functions-pki))
    (plugin . ,(addp "plugin" company-marklogic-sjs-functions-plugin))
    (ppt . ,(addp "ppt" company-marklogic-sjs-functions-ppt))
    (prof . ,(addp "prof" company-marklogic-sjs-functions-prof))
    (rdf . ,(addp "rdf" company-marklogic-sjs-functions-rdf))
    (rdt . ,(addp "rdt" company-marklogic-sjs-functions-rdt))
    (rest . ,(addp "rest" company-marklogic-sjs-functions-rest))
    (sc . ,(addp "sc" company-marklogic-sjs-functions-sc))
    (schematron . ,(addp "schematron" company-marklogic-sjs-functions-schematron))
    (search . ,(addp "search" company-marklogic-sjs-functions-search))
    (sec . ,(addp "sec" company-marklogic-sjs-functions-sec))
    (sem . ,(addp "sem" company-marklogic-sjs-functions-sem))
    (spell . ,(addp "spell" company-marklogic-sjs-functions-spell))
    (sql . ,(addp "sql" company-marklogic-sjs-functions-sql))
    (tde . ,(addp "tde" company-marklogic-sjs-functions-tde))
    (temporal . ,(addp "temporal" company-marklogic-sjs-functions-temporal))
    (thsr . ,(addp "thsr" company-marklogic-sjs-functions-thsr))
    (tieredstorage . ,(addp "tieredstorage" company-marklogic-sjs-functions-tieredstorage))
    (trgr . ,(addp "trgr" company-marklogic-sjs-functions-trgr))
    (view . ,(addp "view" company-marklogic-sjs-functions-view))
    (xdmp . ,(addp "xdmp" company-marklogic-sjs-functions-xdmp))
    (xhtml . ,(addp "xhtml" company-marklogic-sjs-functions-xhtml))
    (xinc . ,(addp "xinc" company-marklogic-sjs-functions-xinc))
    (xp . ,(addp "xp" company-marklogic-sjs-functions-xp))
    (xs . ,(addp "xs" company-marklogic-sjs-functions-xs)))))

(provide 'company-marklogic-sjs)

;;; company-marklogic-sjs.el ends here
